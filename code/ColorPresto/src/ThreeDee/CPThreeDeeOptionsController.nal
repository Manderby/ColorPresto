
//define myPI = 3.14159;
//typedef myType = f32;
//typedef myFunctionType = bool (i32);

CPThreeDeeOptionsController = module : NASpace;


.parent           = share CPThreeDeeController;

.axisLabel        = NALabel;
.axisCheckBox     = NACheckBox;
.spectrumLabel    = NALabel;
.spectrumCheckBox = NACheckBox;
.backgroundLabel  = NALabel;
.backgroundSlider = NASlider;
.fovyLabel        = NALabel;
.fovySlider       = NASlider;

.showSpectrum     = false;
.showAxis         = true;
.backgroundGray   = 0.3f;
.fovy             = 50.f;



//myNormalFunction        = bool (i32 myParameter) {return true;}
//.myPublicStaticFunction = bool (i32 myParameter) {return true;}
//myPrivateMethod         = bool (this, i32 myParameter) {return true;}
//.myPublicMethod         = bool (this, i32 myParameter) {return true;}



pressOptionsButton = bool (NAReaction reaction) {
  this = [reaction.controller];

  if(reaction.uiElement == spectrumCheckBox){
    showSpectrum = spectrumCheckBox.getState();
  }else if(reaction.uiElement == axisCheckBox){
    showAxis = axisCheckBox.getState();
  }

  parent.update();

  return true;
}



changeOptionsSlider = bool (NAReaction reaction) {
  mutable this = [reaction.controller];

  if(reaction.uiElement == backgroundSlider){
    backgroundGray = backgroundSlider.getValue();
  }else if(reaction.uiElement == fovySlider){
    fovy = fovySlider.getValue();
    if(fovy < 15.f){fovy = 0.f;}
  }
  
  parent.update();

  return true;
}



.constructor = (
  mutable this,
  parent CPThreeDeeController)
{
  .parent = parent;
  space = new NASpace(naMakeSize(1, 1));
  space.setAlternateBackground(false);

  axisLabel = new NALabel(cpTranslate(CPAxis), threeDeeLabelWidth);
  axisCheckBox = new NACheckBox("", 30);
  axisCheckBox.addUIReaction(NA_UI_COMMAND_PRESSED, pressOptionsButton, this);

  spectrumLabel = new NALabel(cpTranslate(CPSpectrum), threeDeeLabelWidth);
  spectrumCheckBox = new NACheckBox("", 30);
  spectrumCheckBox.addUIReaction(NA_UI_COMMAND_PRESSED, pressOptionsButton, this);

  backgroundLabel = new NALabel(cpTranslate(CPBackground), threeDeeLabelWidth);
  backgroundSlider = new NASlider(threeDeeControlWidth);
  backgroundSlider.setRange(0., 1., 0);
  backgroundSlider.addUIReaction(NA_UI_COMMAND_EDITED, changeOptionsSlider, this);

  fovyLabel = new NALabel(cpTranslate(CPFovy), threeDeeLabelWidth);
  fovySlider = new NASlider(threeDeeControlWidth);
  fovySlider.setRange(90., 0., 0);
  fovySlider.addUIReaction(NA_UI_COMMAND_EDITED, changeOptionsSlider, this);

  // layout
  cpBeginUILayout(space, threeDeeBezel);
  
  cpAddUIRow(axisLabel, uiElemHeight);
  cpAddUICol(axisCheckBox, marginH);

  cpAddUIRow(spectrumLabel, uiElemHeight);
  cpAddUICol(spectrumCheckBox, marginH);

  cpAddUIRow(backgroundLabel, uiElemHeight);
  cpAddUICol(backgroundSlider, marginH);

  cpAddUIRow(fovyLabel, uiElemHeight);
  cpAddUICol(fovySlider, marginH);

  cpEndUILayout();
}



.getAxisGray = f64 (this) {
  axisGray = backgroundGray + .5;
  if(axisGray > 1.f){axisGray -= 1.f;}
  return axisGray;
}

.getBackgroundGray = f64 (this) {return backgroundGray;}
.getFovy           = f64 (this) {return fovy;}
.getShowAxis       = f64 (this) {return showAxis;}
.getShowSpectrum   = f64 (this) {return showSpectrum;}



.update = (this) {
  spectrumCheckBox.setState(showSpectrum);
  axisCheckBox.setState(showAxis);
  backgroundSlider.setValue(backgroundGray);
  fovySlider.setValue(fovy);
}
