
//define MY_PI = 3.14159;
//define MyType = f32;
//define MyFunctionType = bool (i32);

// Dot . means "local" or "private", restricted to only concerning this module, this file, this function

//mutable .myPrivateVariable     = bool;
//mutable .myPrivateVariable2    = 1234.;
//mutable myPublicVariable       = "Hello";
//
// outside of module space
//.myPrivateFunction        = bool (i32 myParameter) {return true;}
//myPublicStaticFunction = bool (i32 myParameter) {return true;}
// inside of module space
//.myPrivateMethod         = bool (this, i32 myParameter) {return true;}
//myPublicMethod         = bool (this, i32 myParameter) {return true;}

// Here is global module space
// .PrivateClass = module : DerivedClass;
// Here is PrivateClass module space
// PublicClass = module : DerivedClass;
// Here is PublicClass module space


// Variables
// in global scope: mutable by default. Requires define for constants
// in module scope: mutable by default. Requires define for constants
// In parameter scope: const by default. Requires mutable otherwise
// In local scope: all mutable. Feel free to shoot yourself in the foot.


// Dot

// Dot in parameter or return type .MyRetType myFunction(.MyType x): Template type.
// If missing: Normal type

// Dot in parameter name myFunction(MyType .x): Template parameter. Must be last
// If missing: normal parameter

// Dot in global scope: .mySymbol: Only visible inside the given file
// If missing: exported symbol

// Dot in module scope: .mySymbol: Only visible inside the given module. private.
// If missing: Accessible by referencing module. public

// Dot in function/local scope: .mySymbol: Explicitely access member symbol
// If missing: Normal local variable. Shadowing may occur. Warn if Verwechslungsgefahr Initialization and Assignment
// Warn if unused local variable. Otherwise renaming of member might get unnoticed.
// Todo: This is a conundrum. Either find a way to distinguish between Initialization and Assignment or
// put alot of warnings, or define to always require the dot for member variables. Or disallow shadowing.


// test = 1234;
// function = (i32 test) {
//     .test = test;
// }
// function2 = () {
//     test = 1234;    // shadow warning. Might confuse assignment with initialization.
// }
// 
// vectorAddition2 = .Type[2] (.Type[2] a, .Type[2] b) {
//     .Type[2] ret;
//     ret[0] = a[0] + b[0];
//     ret[1] = a[1] + b[1];
//     return ret;
// }
// vectorAddition = .Type[.N] (.Type[.N] a, .Type[.N] b, u32 .N) {
//     .Type[.N] ret;
//     for(i = [0 .. .N]) {
//         ret[i] = a[i] + b[i];
//     }
//     return ret;
// }


// Module with template parameters:
// Vector = module(u32 .N, .Type T);
// myVector = Vector(3, f32).init(0.f);
// V3 = Vector(3, f64);
// myDoubleVector = V3.init(0.);







CPThreeDeeOptionsController = module : NASpace;



.parent           = share CPThreeDeeController;

.axisLabel        = NALabel;
.axisCheckBox     = NACheckBox;
.spectrumLabel    = NALabel;
.spectrumCheckBox = NACheckBox;
.backgroundLabel  = NALabel;
.backgroundSlider = NASlider;
.fovyLabel        = NALabel;
.fovySlider       = NASlider;

.showSpectrum     = false;
.showAxis         = true;
.backgroundGray   = 0.3f;
.fovy             = 50.f;



.pressOptionsButton = void (NAReaction reaction) {
  this = reaction.controller;

  iff (reaction.uiElement) (spectrumCheckBox){
    showSpectrum = spectrumCheckBox.getState();
  } else (axisCheckBox){
    showAxis = axisCheckBox.getState();
  }

  parent.update();
}



.changeOptionsSlider = void (NAReaction reaction) {
  mutable this = reaction.controller;

  iff (reaction.uiElement)(backgroundSlider){
    backgroundGray = backgroundSlider.getValue();
  } else (fovySlider){
    fovy = fovySlider.getValue();
    if(fovy < 15.f){fovy = 0.f;}
  }
  
  parent.update();
}



init = (
  mutable this,
  CPThreeDeeController .parent)
{
  parent = .parent;
  space = new NASpace(naMakeSize(1, 1));
  space.setAlternateBackground(false);

  axisLabel = new NALabel(cpTranslate(CPAxis), threeDeeLabelWidth);
  axisCheckBox = new NACheckBox("", 30);
  axisCheckBox.addUIReaction(NA_UI_COMMAND_PRESSED, pressOptionsButton, this);

  spectrumLabel = new NALabel(cpTranslate(CPSpectrum), threeDeeLabelWidth);
  spectrumCheckBox = new NACheckBox("", 30);
  spectrumCheckBox.addUIReaction(NA_UI_COMMAND_PRESSED, pressOptionsButton, this);

  backgroundLabel = new NALabel(cpTranslate(CPBackground), threeDeeLabelWidth);
  backgroundSlider = new NASlider(threeDeeControlWidth);
  backgroundSlider.setRange(0., 1., 0);
  backgroundSlider.addUIReaction(NA_UI_COMMAND_EDITED, changeOptionsSlider, this);

  fovyLabel = new NALabel(cpTranslate(CPFovy), threeDeeLabelWidth);
  fovySlider = new NASlider(threeDeeControlWidth);
  fovySlider.setRange(90., 0., 0);
  fovySlider.addUIReaction(NA_UI_COMMAND_EDITED, changeOptionsSlider, this);

  // layout
  cpBeginUILayout(space, threeDeeBorder);
  
  cpAddUIRow(axisLabel, uiElemHeight);
  cpAddUICol(axisCheckBox, marginH);

  cpAddUIRow(spectrumLabel, uiElemHeight);
  cpAddUICol(spectrumCheckBox, marginH);

  cpAddUIRow(backgroundLabel, uiElemHeight);
  cpAddUICol(backgroundSlider, marginH);

  cpAddUIRow(fovyLabel, uiElemHeight);
  cpAddUICol(fovySlider, marginH);

  cpEndUILayout();
}



getAxisGray = f64 (this) {
  axisGray = backgroundGray + .5;
  if(axisGray > 1.f){axisGray -= 1.f;}
  return axisGray;
}



getBackgroundGray = f64 (this) {return backgroundGray;}
getFovy           = f64 (this) {return fovy;}
getShowAxis       = f64 (this) {return showAxis;}
getShowSpectrum   = f64 (this) {return showSpectrum;}



update = (this) {
  spectrumCheckBox.setState(showSpectrum);
  axisCheckBox.setState(showAxis);
  backgroundSlider.setValue(backgroundGray);
  fovySlider.setValue(fovy);
}
