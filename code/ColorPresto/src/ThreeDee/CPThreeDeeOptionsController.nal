
//define MY_PI = 3.14159;
//define MyType = f32;
//define MyFunctionType = bool (i32);

// Dot . means "local" or "private", restricted to only concerning this module, this file, this function

//mutable .myPrivateVariable     = bool;
//mutable .myPrivateVariable2    = 1234.;
//mutable myPublicVariable       = "Hello";
//
// outside of module space
//.myPrivateFunction        = bool (i32 myParameter) {return true;}
//myPublicStaticFunction = bool (i32 myParameter) {return true;}
// inside of module space
//.myPrivateMethod         = bool (this, i32 myParameter) {return true;}
//myPublicMethod         = bool (this, i32 myParameter) {return true;}

// Here is global module space
// .PrivateClass = module : DerivedClass;
// Here is PrivateClass module space
// PublicClass = module : DerivedClass;
// Here is PublicClass module space


// Variables
// in global scope: mutable by default. Requires define for constants
// in module scope: mutable by default. Requires define for constants
// In parameter scope: const by default. Requires mutable otherwise
// In local scope: all mutable. Feel free to shoot yourself in the foot.


// Templates

// Dot in parameter or return type .MyRetType myFunction(.MyType x): Template type.
// If missing: Normal type

// Dot in parameter name myFunction(MyType .x): Template parameter. Must be last
// If missing: normal parameter

// .Type[2] vectorAddition2(.Type[2] a, .Type[2] b) {
//     .Type[2] ret;
//     ret[0] = a[0] + b[0];
//     ret[1] = a[1] + b[1];
//     return ret;
// }
// .Type[.N] vectorAddition(.Type[.N] a, .Type[.N] b, u32 .N) {
//     .Type[.N] ret;
//     for(i = [0 .. .N]) {
//         ret[i] = a[i] + b[i];
//     }
//     return ret;
// }

// Module with template parameters:
// module Vector<u32 .N, .Type T>;
// myVector = Vector<3, f32>.init(0.f);
// module Vector3f : Vector<3, f32>;
// myFloatVector = Vector3f.init(0.);



// Symbols in one region, meaning global, module, function and scope, are visible independent of the ordering.
//
// At start of file:
// int  myVar1        // global and exported variable.
// int .myVar2        // global variable, but only visible to current file. Internal linkeage
//                    // Shadows any other global variable with the same name.
// int  myFunc1()     // global and exported function.
// int .myFunc2()     // global function, but only visible to current file. Internal linkeage
//                    // Shadows any other global function with the same name.
//
// Module:
// module  MyModule1; // public and exported module.
//                    // After this line, all definitions belong to this module. 
// module .MyModule2; // private module. Only visible to current file.
//                    // After this line, all definitions belong to this module.
//
// After module declaration:
// int  myVar1        // public member variable.
// int .myVar2        // private member variable.
// int  myFunc1()     // public static method.
// int .myFunc2()     // private static method. (Same as global function with internal linkeage)
// int  myFunc1(this) // public method.
// int .myFunc2(this) // private method.

// static variables?

// Inside function / scope:
// int  myVar1        // definition of local variable.
// int .myVar2        // not allowed.
// myVar1             // access of local variable or member variable if no local available.
// .myVar2            // access of member variable. (explicit member access)



module CPThreeDeeOptionsController : NASpace;



share CPThreeDeeController .parent;

NALabel    .axisLabel;
NACheckBox .axisCheckBox;
NALabel    .spectrumLabel;
NACheckBox .spectrumCheckBox;
NALabel    .backgroundLabel;
NASlider   .backgroundSlider;
NALabel    .fovyLabel;
NASlider   .fovySlider;

bool       .showSpectrum   = false;   // or { false } or bool(false)
bool       .showAxis       = true;    // or { true }  or bool(true)
f32        .backgroundGray = 0.3f;    // or { 0.3f }  or f32(0.3f)
f32        .fovy           = 50.f;    // or { 50.f }  or f32(50.f)



void .pressOptionsButton(NAReaction reaction) {
  this = reaction.controller;

  iff (reaction.uiElement) (spectrumCheckBox) {
    showSpectrum = spectrumCheckBox.getState();
  } else (axisCheckBox) {
    showAxis = axisCheckBox.getState();
  }

  parent.update();
}



void .changeOptionsSlider(NAReaction reaction) {
  mutable this = reaction.controller;

  iff (reaction.uiElement)(backgroundSlider) {
    backgroundGray = backgroundSlider.getValue();
  } else (fovySlider) {
    fovy = fovySlider.getValue();
    if(fovy < 15.f) {fovy = 0.f;}
  }
  
  parent.update();
}



void init(mutable this, CPThreeDeeController .parent) {
  parent = .parent;
  space = new NASpace(naMakeSize(1, 1));
  space.setAlternateBackground(false);

  axisLabel = new NALabel(cpTranslate(CPAxis), threeDeeLabelWidth);
  axisCheckBox = new NACheckBox("", 30);
  axisCheckBox.addUIReaction(NA_UI_COMMAND_PRESSED, pressOptionsButton, this);

  spectrumLabel = new NALabel(cpTranslate(CPSpectrum), threeDeeLabelWidth);
  spectrumCheckBox = new NACheckBox("", 30);
  spectrumCheckBox.addUIReaction(NA_UI_COMMAND_PRESSED, pressOptionsButton, this);

  backgroundLabel = new NALabel(cpTranslate(CPBackground), threeDeeLabelWidth);
  backgroundSlider = new NASlider(threeDeeControlWidth);
  backgroundSlider.setRange(0., 1., 0);
  backgroundSlider.addUIReaction(NA_UI_COMMAND_EDITED, changeOptionsSlider, this);

  fovyLabel = new NALabel(cpTranslate(CPFovy), threeDeeLabelWidth);
  fovySlider = new NASlider(threeDeeControlWidth);
  fovySlider.setRange(90., 0., 0);
  fovySlider.addUIReaction(NA_UI_COMMAND_EDITED, changeOptionsSlider, this);

  // layout
  cpBeginUILayout(space, threeDeeBorder);
  
  cpAddUIRow(axisLabel, uiElemHeight);
  cpAddUICol(axisCheckBox, marginH);

  cpAddUIRow(spectrumLabel, uiElemHeight);
  cpAddUICol(spectrumCheckBox, marginH);

  cpAddUIRow(backgroundLabel, uiElemHeight);
  cpAddUICol(backgroundSlider, marginH);

  cpAddUIRow(fovyLabel, uiElemHeight);
  cpAddUICol(fovySlider, marginH);

  cpEndUILayout();
}



f64 getAxisGray(this) {
  axisGray = backgroundGray + .5;
  if(axisGray > 1.f) {axisGray -= 1.f;}
  return axisGray;
}



f64 getBackgroundGray (this) {return backgroundGray;}
f64 getFovy           (this) {return fovy;}
f64 getShowAxis       (this) {return showAxis;}
f64 getShowSpectrum   (this) {return showSpectrum;}



void update(this) {
  spectrumCheckBox.setState(showSpectrum);
  axisCheckBox.setState(showAxis);
  backgroundSlider.setValue(backgroundGray);
  fovySlider.setValue(fovy);
}
