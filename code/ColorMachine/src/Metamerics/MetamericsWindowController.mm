
#import "MetamericsWindowController.h"
#import "ColorMachineApplication.h"

// Prototypes:
void convertYuvtoYcd(float* Ycd, const float* yuv);
void convertYcdtoadaptedYuv(float* yuv, const float* testYcd, const float* srcwhitePointYcd, const float* dstwhitePointYcd);
void convertYuvtoUVW(float* UVW, float* yuv, const float* whitePointYuv);





@implementation TwoColorView

- (void)setColors:(CMLVec3)left :(CMLVec3)right{
  cmlCpy3(leftcolor, left);
  cmlCpy3(rightcolor, right);
}

- (void)drawRect:(NSRect)rect{
  CGRect drawrect = NSRectToCGRect([self bounds]);
  drawrect.size.width /= 2.f;
  CGContextRef context = (CGContextRef)[[NSGraphicsContext currentContext] graphicsPort];
  CGColorRef fillColor;
  CGColorRef strokeColor;
  CGColorSpaceRef colorspace = CGColorSpaceCreateDeviceRGB();
  CGFloat rgbcomponents[4];
  rgbcomponents[3] = 1.;

//  strokeColor = CGColorCreateGenericRGB(0.f, 0.f, 0.f, 1.f);
//  [(ColorMachineApplication*)NSApp drawColor:missingcolor fillBack:NO linecolor:strokeColor context:context inRect:drawrect];
//  CGColorRelease(strokeColor);

//  drawrect.origin.x += drawrect.size.width;
  rgbcomponents[0] = leftcolor[0];
  rgbcomponents[1] = leftcolor[1];
  rgbcomponents[2] = leftcolor[2];
  fillColor = CGColorCreate(colorspace, rgbcomponents);
  CGContextSetFillColorWithColor(context, fillColor);
  CGContextFillRect(context, drawrect);
  CGColorRelease(fillColor);

  drawrect.origin.x += drawrect.size.width;
  rgbcomponents[0] = rightcolor[0];
  rgbcomponents[1] = rightcolor[1];
  rgbcomponents[2] = rightcolor[2];
  fillColor = CGColorCreate(colorspace, rgbcomponents);
  CGContextSetFillColorWithColor(context, fillColor);
  CGContextFillRect(context, drawrect);
  CGColorRelease(fillColor);
  CGColorSpaceRelease(colorspace);

  strokeColor = CGColorCreateGenericRGB(0.f, 0.f, 0.f, .3f);
  CGContextSetStrokeColorWithColor(context, strokeColor);
  CGContextStrokeRect(context, NSRectToCGRect([self bounds]));
  CGColorRelease(strokeColor);
}

@end




const char* referenceIlluminationstrings[NUMBER_OF_REFERENCE_ILLUMINATIONS] = {
  "D50",           // REFERENCE_ILLUMINATION_D50
  "D55",           // REFERENCE_ILLUMINATION_D55
  "D65",           // REFERENCE_ILLUMINATION_D65
  "D75",           // REFERENCE_ILLUMINATION_D75
};


// Metamer names:
//Light greyish red
//Dark greyish yellow
//Strong yellow green
//Moderate yellow green
//Light bluish green
//Light blue
//Light violet
//Light reddish purple
//Strong Red
//Strong Yellow
//Strong green
//Strong blue
//Light yellowish pink
//Moderate olive green

const float metamer1data[] = {
  0.219f, 0.239f, 0.252f, 0.256f, 0.256f, 0.254f, 0.252f, 0.248f, 0.244f, 0.240f,
  0.237f, 0.232f, 0.230f, 0.226f, 0.225f, 0.222f, 0.220f, 0.218f, 0.216f, 0.214f,
  0.214f, 0.214f, 0.216f, 0.218f, 0.223f, 0.225f, 0.226f, 0.226f, 0.225f, 0.225f,
  0.227f, 0.230f, 0.236f, 0.245f, 0.253f, 0.262f, 0.272f, 0.283f, 0.298f, 0.318f,
  0.341f, 0.367f, 0.390f, 0.409f, 0.424f, 0.435f, 0.442f, 0.448f, 0.450f, 0.451f,
  0.451f, 0.451f, 0.451f, 0.451f, 0.450f, 0.450f, 0.451f, 0.451f, 0.453f, 0.454f,
  0.455f, 0.457f, 0.458f, 0.460f, 0.462f, 0.463f, 0.464f, 0.465f, 0.466f, 0.466f,
  0.466f, 0.466f, 0.467f, 0.467f, 0.467f, 0.467f, 0.467f, 0.467f, 0.467f, 0.467f,
  0.467f};
const float metamer2data[] = {
  0.070f, 0.079f, 0.089f, 0.101f, 0.111f, 0.116f, 0.118f, 0.120f, 0.121f, 0.122f,
  0.122f, 0.122f, 0.123f, 0.124f, 0.127f, 0.128f, 0.131f, 0.134f, 0.138f, 0.143f,
  0.150f, 0.159f, 0.174f, 0.190f, 0.207f, 0.225f, 0.242f, 0.253f, 0.260f, 0.264f,
  0.267f, 0.269f, 0.272f, 0.276f, 0.282f, 0.289f, 0.299f, 0.309f, 0.322f, 0.329f,
  0.335f, 0.339f, 0.341f, 0.341f, 0.342f, 0.342f, 0.342f, 0.341f, 0.341f, 0.339f,
  0.339f, 0.338f, 0.338f, 0.337f, 0.336f, 0.335f, 0.334f, 0.332f, 0.332f, 0.331f,
  0.331f, 0.330f, 0.329f, 0.328f, 0.328f, 0.327f, 0.326f, 0.325f, 0.324f, 0.324f,
  0.324f, 0.323f, 0.322f, 0.321f, 0.320f, 0.318f, 0.316f, 0.315f, 0.315f, 0.314f,
  0.314f};
const float metamer3data[] = {
  0.065f, 0.068f, 0.070f, 0.072f, 0.073f, 0.073f, 0.074f, 0.074f, 0.074f, 0.073f,
  0.073f, 0.073f, 0.073f, 0.073f, 0.074f, 0.075f, 0.077f, 0.080f, 0.085f, 0.094f,
  0.109f, 0.126f, 0.148f, 0.172f, 0.198f, 0.221f, 0.241f, 0.260f, 0.278f, 0.302f,
  0.339f, 0.370f, 0.392f, 0.399f, 0.400f, 0.393f, 0.380f, 0.365f, 0.349f, 0.332f,
  0.315f, 0.299f, 0.285f, 0.272f, 0.264f, 0.257f, 0.252f, 0.247f, 0.241f, 0.235f,
  0.229f, 0.224f, 0.220f, 0.217f, 0.216f, 0.216f, 0.219f, 0.224f, 0.230f, 0.238f,
  0.251f, 0.269f, 0.288f, 0.312f, 0.340f, 0.366f, 0.390f, 0.412f, 0.431f, 0.447f,
  0.460f, 0.472f, 0.481f, 0.488f, 0.493f, 0.497f, 0.500f, 0.502f, 0.505f, 0.510f,
  0.516f};
const float metamer4data[] = {
  0.074f, 0.083f, 0.093f, 0.105f, 0.116f, 0.121f, 0.124f, 0.126f, 0.128f, 0.131f,
  0.135f, 0.139f, 0.144f, 0.151f, 0.161f, 0.172f, 0.186f, 0.205f, 0.229f, 0.254f,
  0.281f, 0.308f, 0.332f, 0.352f, 0.370f, 0.383f, 0.390f, 0.394f, 0.395f, 0.392f,
  0.385f, 0.377f, 0.367f, 0.354f, 0.341f, 0.327f, 0.312f, 0.296f, 0.280f, 0.263f,
  0.247f, 0.229f, 0.214f, 0.198f, 0.185f, 0.175f, 0.169f, 0.164f, 0.160f, 0.156f,
  0.154f, 0.152f, 0.151f, 0.149f, 0.148f, 0.148f, 0.148f, 0.149f, 0.151f, 0.154f,
  0.158f, 0.162f, 0.165f, 0.168f, 0.170f, 0.171f, 0.170f, 0.168f, 0.166f, 0.164f,
  0.164f, 0.165f, 0.168f, 0.172f, 0.177f, 0.181f, 0.185f, 0.189f, 0.192f, 0.194f,
  0.197f};
const float metamer5data[] = {
  0.295f, 0.306f, 0.310f, 0.312f, 0.313f, 0.315f, 0.319f, 0.322f, 0.326f, 0.330f,
  0.334f, 0.339f, 0.346f, 0.352f, 0.360f, 0.369f, 0.381f, 0.394f, 0.403f, 0.410f,
  0.415f, 0.418f, 0.419f, 0.417f, 0.413f, 0.409f, 0.403f, 0.396f, 0.389f, 0.381f,
  0.372f, 0.363f, 0.353f, 0.342f, 0.331f, 0.320f, 0.308f, 0.296f, 0.284f, 0.271f,
  0.260f, 0.247f, 0.232f, 0.220f, 0.210f, 0.200f, 0.194f, 0.189f, 0.185f, 0.183f,
  0.180f, 0.177f, 0.176f, 0.175f, 0.175f, 0.175f, 0.175f, 0.177f, 0.180f, 0.183f,
  0.186f, 0.189f, 0.192f, 0.195f, 0.199f, 0.200f, 0.199f, 0.198f, 0.196f, 0.195f,
  0.195f, 0.196f, 0.197f, 0.200f, 0.203f, 0.205f, 0.208f, 0.212f, 0.215f, 0.217f,
  0.219f};
const float metamer6data[] = {
  0.151f, 0.203f, 0.265f, 0.339f, 0.410f, 0.464f, 0.492f, 0.508f, 0.517f, 0.524f,
  0.531f, 0.538f, 0.544f, 0.551f, 0.556f, 0.556f, 0.554f, 0.549f, 0.541f, 0.531f,
  0.519f, 0.504f, 0.488f, 0.469f, 0.450f, 0.431f, 0.414f, 0.395f, 0.377f, 0.358f,
  0.341f, 0.325f, 0.309f, 0.293f, 0.279f, 0.265f, 0.253f, 0.241f, 0.234f, 0.227f,
  0.225f, 0.222f, 0.221f, 0.220f, 0.220f, 0.220f, 0.220f, 0.220f, 0.223f, 0.227f,
  0.233f, 0.239f, 0.244f, 0.251f, 0.258f, 0.263f, 0.268f, 0.273f, 0.278f, 0.281f,
  0.283f, 0.286f, 0.291f, 0.296f, 0.302f, 0.313f, 0.325f, 0.338f, 0.351f, 0.364f,
  0.376f, 0.389f, 0.401f, 0.413f, 0.425f, 0.436f, 0.447f, 0.458f, 0.469f, 0.477f,
  0.485f};
const float metamer7data[] = {
  0.378f, 0.459f, 0.524f, 0.546f, 0.551f, 0.555f, 0.559f, 0.560f, 0.561f, 0.558f,
  0.556f, 0.551f, 0.544f, 0.535f, 0.522f, 0.506f, 0.488f, 0.469f, 0.448f, 0.429f,
  0.408f, 0.385f, 0.363f, 0.341f, 0.324f, 0.311f, 0.301f, 0.291f, 0.283f, 0.273f,
  0.265f, 0.260f, 0.257f, 0.257f, 0.259f, 0.260f, 0.260f, 0.258f, 0.256f, 0.254f,
  0.254f, 0.259f, 0.270f, 0.284f, 0.302f, 0.324f, 0.344f, 0.362f, 0.377f, 0.389f,
  0.400f, 0.410f, 0.420f, 0.429f, 0.438f, 0.445f, 0.452f, 0.457f, 0.462f, 0.466f,
  0.468f, 0.470f, 0.473f, 0.477f, 0.483f, 0.489f, 0.496f, 0.503f, 0.511f, 0.518f,
  0.525f, 0.532f, 0.539f, 0.546f, 0.553f, 0.559f, 0.565f, 0.570f, 0.575f, 0.578f,
  0.581f};
const float metamer8data[] = {
  0.104f, 0.129f, 0.170f, 0.240f, 0.319f, 0.416f, 0.462f, 0.482f, 0.490f, 0.488f,
  0.482f, 0.473f, 0.462f, 0.450f, 0.439f, 0.426f, 0.413f, 0.397f, 0.382f, 0.366f,
  0.352f, 0.337f, 0.325f, 0.310f, 0.299f, 0.289f, 0.283f, 0.276f, 0.270f, 0.262f,
  0.256f, 0.251f, 0.250f, 0.251f, 0.254f, 0.258f, 0.264f, 0.269f, 0.272f, 0.274f,
  0.278f, 0.284f, 0.295f, 0.316f, 0.348f, 0.384f, 0.434f, 0.482f, 0.528f, 0.568f,
  0.604f, 0.629f, 0.648f, 0.663f, 0.676f, 0.685f, 0.693f, 0.700f, 0.705f, 0.709f,
  0.712f, 0.715f, 0.717f, 0.719f, 0.721f, 0.720f, 0.719f, 0.722f, 0.725f, 0.727f,
  0.729f, 0.730f, 0.730f, 0.730f, 0.730f, 0.730f, 0.730f, 0.730f, 0.730f, 0.730f,
  0.730f};
const float metamer9data[] = {
  0.066f, 0.062f, 0.058f, 0.055f, 0.052f, 0.052f, 0.051f, 0.050f, 0.050f, 0.049f,
  0.048f, 0.047f, 0.046f, 0.044f, 0.042f, 0.041f, 0.038f, 0.035f, 0.033f, 0.031f,
  0.030f, 0.029f, 0.028f, 0.028f, 0.028f, 0.029f, 0.030f, 0.030f, 0.031f, 0.031f,
  0.032f, 0.032f, 0.033f, 0.034f, 0.035f, 0.037f, 0.041f, 0.044f, 0.048f, 0.052f,
  0.060f, 0.076f, 0.102f, 0.136f, 0.190f, 0.256f, 0.336f, 0.418f, 0.505f, 0.581f,
  0.641f, 0.682f, 0.717f, 0.740f, 0.758f, 0.770f, 0.781f, 0.790f, 0.797f, 0.803f,
  0.809f, 0.814f, 0.819f, 0.824f, 0.828f, 0.830f, 0.831f, 0.833f, 0.835f, 0.836f,
  0.836f, 0.837f, 0.838f, 0.839f, 0.839f, 0.839f, 0.839f, 0.839f, 0.839f, 0.839f,
  0.839f};
const float metamer10data[] = {
  0.050f, 0.054f, 0.059f, 0.063f, 0.066f, 0.067f, 0.068f, 0.069f, 0.069f, 0.070f,
  0.072f, 0.073f, 0.076f, 0.078f, 0.083f, 0.088f, 0.095f, 0.103f, 0.113f, 0.125f,
  0.142f, 0.162f, 0.189f, 0.219f, 0.262f, 0.305f, 0.365f, 0.416f, 0.465f, 0.509f,
  0.546f, 0.581f, 0.610f, 0.634f, 0.653f, 0.666f, 0.678f, 0.687f, 0.693f, 0.698f,
  0.701f, 0.704f, 0.705f, 0.705f, 0.706f, 0.707f, 0.707f, 0.707f, 0.708f, 0.708f,
  0.710f, 0.711f, 0.712f, 0.714f, 0.716f, 0.718f, 0.720f, 0.722f, 0.725f, 0.729f,
  0.731f, 0.735f, 0.739f, 0.742f, 0.746f, 0.748f, 0.749f, 0.751f, 0.753f, 0.754f,
  0.755f, 0.755f, 0.755f, 0.755f, 0.756f, 0.757f, 0.758f, 0.759f, 0.759f, 0.759f,
  0.759f};
const float metamer11data[] = {
  0.111f, 0.121f, 0.127f, 0.129f, 0.127f, 0.121f, 0.116f, 0.112f, 0.108f, 0.105f,
  0.104f, 0.104f, 0.105f, 0.106f, 0.110f, 0.115f, 0.123f, 0.134f, 0.148f, 0.167f,
  0.192f, 0.219f, 0.252f, 0.291f, 0.325f, 0.347f, 0.356f, 0.353f, 0.346f, 0.333f,
  0.314f, 0.294f, 0.271f, 0.248f, 0.227f, 0.206f, 0.188f, 0.170f, 0.153f, 0.138f,
  0.125f, 0.114f, 0.106f, 0.100f, 0.096f, 0.092f, 0.090f, 0.087f, 0.085f, 0.082f,
  0.080f, 0.079f, 0.078f, 0.078f, 0.078f, 0.078f, 0.081f, 0.083f, 0.088f, 0.093f,
  0.102f, 0.112f, 0.125f, 0.141f, 0.161f, 0.182f, 0.203f, 0.223f, 0.242f, 0.257f,
  0.270f, 0.282f, 0.292f, 0.302f, 0.310f, 0.314f, 0.317f, 0.323f, 0.330f, 0.334f,
  0.338f};
const float metamer12data[] = {
  0.120f, 0.103f, 0.090f, 0.082f, 0.076f, 0.068f, 0.064f, 0.065f, 0.075f, 0.093f,
  0.123f, 0.160f, 0.207f, 0.256f, 0.300f, 0.331f, 0.346f, 0.347f, 0.341f, 0.328f,
  0.307f, 0.282f, 0.257f, 0.230f, 0.204f, 0.178f, 0.154f, 0.129f, 0.109f, 0.090f,
  0.075f, 0.062f, 0.051f, 0.041f, 0.035f, 0.029f, 0.025f, 0.022f, 0.019f, 0.017f,
  0.017f, 0.017f, 0.016f, 0.016f, 0.016f, 0.016f, 0.016f, 0.016f, 0.016f, 0.016f,
  0.018f, 0.018f, 0.018f, 0.018f, 0.019f, 0.020f, 0.023f, 0.024f, 0.026f, 0.030f,
  0.035f, 0.043f, 0.056f, 0.074f, 0.097f, 0.128f, 0.166f, 0.210f, 0.257f, 0.305f,
  0.354f, 0.401f, 0.446f, 0.485f, 0.520f, 0.551f, 0.577f, 0.599f, 0.618f, 0.633f,
  0.645f};
const float metamer13data[] = {
  0.104f, 0.127f, 0.161f, 0.211f, 0.264f, 0.313f, 0.341f, 0.352f, 0.359f, 0.361f,
  0.364f, 0.365f, 0.367f, 0.369f, 0.372f, 0.374f, 0.376f, 0.379f, 0.384f, 0.389f,
  0.397f, 0.405f, 0.416f, 0.429f, 0.443f, 0.454f, 0.461f, 0.466f, 0.469f, 0.471f,
  0.474f, 0.476f, 0.483f, 0.490f, 0.506f, 0.526f, 0.553f, 0.582f, 0.618f, 0.651f,
  0.680f, 0.701f, 0.717f, 0.729f, 0.736f, 0.742f, 0.745f, 0.747f, 0.748f, 0.748f,
  0.748f, 0.748f, 0.748f, 0.748f, 0.748f, 0.748f, 0.747f, 0.747f, 0.747f, 0.747f,
  0.747f, 0.747f, 0.747f, 0.746f, 0.746f, 0.746f, 0.745f, 0.744f, 0.743f, 0.744f,
  0.745f, 0.748f, 0.750f, 0.750f, 0.749f, 0.748f, 0.748f, 0.747f, 0.747f, 0.747f,
  0.747f};
const float metamer14data[] = {
  0.036f, 0.036f, 0.037f, 0.038f, 0.039f, 0.039f, 0.040f, 0.041f, 0.042f, 0.042f,
  0.043f, 0.044f, 0.044f, 0.045f, 0.045f, 0.046f, 0.047f, 0.048f, 0.050f, 0.052f,
  0.055f, 0.057f, 0.062f, 0.067f, 0.075f, 0.083f, 0.092f, 0.100f, 0.108f, 0.121f,
  0.133f, 0.142f, 0.150f, 0.154f, 0.155f, 0.152f, 0.147f, 0.140f, 0.133f, 0.125f,
  0.118f, 0.112f, 0.106f, 0.101f, 0.098f, 0.095f, 0.093f, 0.090f, 0.089f, 0.087f,
  0.086f, 0.085f, 0.084f, 0.084f, 0.084f, 0.084f, 0.085f, 0.087f, 0.092f, 0.096f,
  0.102f, 0.110f, 0.123f, 0.137f, 0.152f, 0.169f, 0.188f, 0.207f, 0.226f, 0.243f,
  0.260f, 0.277f, 0.294f, 0.310f, 0.325f, 0.339f, 0.353f, 0.366f, 0.379f, 0.390f,
  0.399f};

// ISO-23603
const float standard1data[] = {
  0.056f, 0.054f, 0.052f, 0.050f, 0.048f, 0.045f, 0.043f, 0.041f, 0.040f, 0.038f,
  0.037f, 0.036f, 0.035f, 0.034f, 0.034f, 0.035f, 0.036f, 0.037f, 0.039f, 0.041f,
  0.045f, 0.051f, 0.058f, 0.067f, 0.077f, 0.089f, 0.102f, 0.115f, 0.127f, 0.139f,
  0.151f, 0.162f, 0.174f, 0.185f, 0.198f, 0.213f, 0.230f, 0.251f, 0.276f, 0.305f,
  0.336f, 0.369f, 0.401f, 0.431f, 0.459f, 0.482f, 0.501f, 0.516f, 0.528f, 0.537f,
  0.544f, 0.551f, 0.557f, 0.562f, 0.567f, 0.573f, 0.579f, 0.585f, 0.592f, 0.598f,
  0.605f, 0.613f, 0.621f, 0.629f, 0.637f, 0.645f, 0.653f, 0.661f, 0.669f, 0.677f,
  0.685f, 0.693f, 0.701f, 0.709f, 0.717f, 0.725f, 0.733f, 0.741f, 0.749f, 0.757f,
  0.765f};
const float standard2data[] = {
  0.054f, 0.062f, 0.069f, 0.075f, 0.080f, 0.084f, 0.087f, 0.089f, 0.089f, 0.088f,
  0.085f, 0.082f, 0.078f, 0.074f, 0.070f, 0.066f, 0.063f, 0.060f, 0.057f, 0.054f,
  0.052f, 0.050f, 0.048f, 0.046f, 0.044f, 0.042f, 0.041f, 0.039f, 0.038f, 0.037f,
  0.036f, 0.035f, 0.034f, 0.033f, 0.032f, 0.031f, 0.031f, 0.031f, 0.031f, 0.032f,
  0.033f, 0.035f, 0.037f, 0.041f, 0.046f, 0.053f, 0.061f, 0.071f, 0.082f, 0.095f,
  0.109f, 0.121f, 0.133f, 0.145f, 0.156f, 0.166f, 0.177f, 0.188f, 0.201f, 0.217f,
  0.236f, 0.257f, 0.279f, 0.302f, 0.326f, 0.350f, 0.374f, 0.398f, 0.422f, 0.446f,
  0.470f, 0.494f, 0.518f, 0.542f, 0.566f, 0.590f, 0.614f, 0.638f, 0.662f, 0.686f,
  0.710f};
const float standard3data[] = {
  0.052f, 0.050f, 0.048f, 0.046f, 0.044f, 0.042f, 0.040f, 0.038f, 0.037f, 0.036f,
  0.035f, 0.034f, 0.033f, 0.032f, 0.032f, 0.032f, 0.032f, 0.033f, 0.034f, 0.036f,
  0.038f, 0.041f, 0.045f, 0.049f, 0.055f, 0.062f, 0.070f, 0.078f, 0.086f, 0.092f,
  0.097f, 0.101f, 0.104f, 0.106f, 0.107f, 0.107f, 0.106f, 0.104f, 0.101f, 0.099f,
  0.096f, 0.093f, 0.090f, 0.089f, 0.089f, 0.089f, 0.090f, 0.091f, 0.092f, 0.092f,
  0.092f, 0.093f, 0.096f, 0.101f, 0.109f, 0.120f, 0.134f, 0.154f, 0.177f, 0.202f,
  0.228f, 0.252f, 0.275f, 0.296f, 0.316f, 0.336f, 0.355f, 0.373f, 0.390f, 0.406f,
  0.421f, 0.435f, 0.448f, 0.460f, 0.471f, 0.481f, 0.490f, 0.498f, 0.505f, 0.511f,
  0.516f};
const float standard4data[] = {
  0.318f, 0.314f, 0.301f, 0.299f, 0.298f, 0.298f, 0.300f, 0.305f, 0.311f, 0.318f,
  0.326f, 0.335f, 0.346f, 0.357f, 0.369f, 0.381f, 0.391f, 0.398f, 0.401f, 0.400f,
  0.396f, 0.387f, 0.376f, 0.363f, 0.348f, 0.331f, 0.313f, 0.297f, 0.283f, 0.272f,
  0.262f, 0.251f, 0.241f, 0.230f, 0.220f, 0.213f, 0.208f, 0.207f, 0.208f, 0.208f,
  0.208f, 0.206f, 0.204f, 0.202f, 0.203f, 0.209f, 0.220f, 0.236f, 0.256f, 0.277f,
  0.298f, 0.317f, 0.337f, 0.361f, 0.391f, 0.430f, 0.476f, 0.531f, 0.589f, 0.647f,
  0.702f, 0.749f, 0.787f, 0.816f, 0.835f, 0.847f, 0.855f, 0.861f, 0.865f, 0.867f,
  0.868f, 0.868f, 0.868f, 0.868f, 0.868f, 0.868f, 0.868f, 0.868f, 0.868f, 0.868f,
  0.868f};
const float standard5data[] = {
  0.120f, 0.115f, 0.111f, 0.108f, 0.106f, 0.106f, 0.109f, 0.114f, 0.120f, 0.127f,
  0.136f, 0.146f, 0.156f, 0.166f, 0.176f, 0.184f, 0.191f, 0.195f, 0.197f, 0.195f,
  0.191f, 0.183f, 0.174f, 0.165f, 0.155f, 0.146f, 0.137f, 0.129f, 0.122f, 0.115f,
  0.110f, 0.107f, 0.105f, 0.105f, 0.105f, 0.105f, 0.105f, 0.105f, 0.107f, 0.111f,
  0.120f, 0.135f, 0.156f, 0.183f, 0.214f, 0.250f, 0.285f, 0.313f, 0.333f, 0.340f,
  0.342f, 0.341f, 0.345f, 0.362f, 0.391f, 0.434f, 0.487f, 0.547f, 0.609f, 0.667f,
  0.721f, 0.766f, 0.803f, 0.830f, 0.849f, 0.859f, 0.866f, 0.871f, 0.875f, 0.878f,
  0.880f, 0.881f, 0.881f, 0.881f, 0.881f, 0.881f, 0.881f, 0.881f, 0.881f, 0.881f,
  0.881f};
  
const float specimen1d50data[] = {
  0.050f, 0.049f, 0.045f, 0.042f, 0.035f, 0.029f, 0.027f, 0.026f, 0.024f, 0.024f,
  0.024f, 0.025f, 0.025f, 0.026f, 0.027f, 0.028f, 0.031f, 0.035f, 0.043f, 0.054f,
  0.068f, 0.085f, 0.103f, 0.121f, 0.136f, 0.148f, 0.156f, 0.160f, 0.160f, 0.162f,
  0.164f, 0.167f, 0.172f, 0.177f, 0.182f, 0.189f, 0.196f, 0.209f, 0.226f, 0.248f,
  0.275f, 0.309f, 0.345f, 0.384f, 0.427f, 0.473f, 0.515f, 0.552f, 0.582f, 0.608f,
  0.630f, 0.646f, 0.659f, 0.671f, 0.683f, 0.695f, 0.708f, 0.723f, 0.736f, 0.750f,
  0.755f, 0.762f, 0.770f, 0.778f, 0.782f, 0.785f, 0.787f, 0.788f, 0.789f, 0.790f,
  0.791f, 0.791f, 0.791f, 0.792f, 0.792f, 0.792f, 0.792f, 0.792f, 0.792f, 0.792f,
  0.792f};
const float specimen2d50data[] = {
  0.069f, 0.068f, 0.066f, 0.064f, 0.059f, 0.059f, 0.063f, 0.074f, 0.081f, 0.088f,
  0.089f, 0.088f, 0.083f, 0.081f, 0.076f, 0.071f, 0.066f, 0.059f, 0.052f, 0.048f,
  0.045f, 0.042f, 0.038f, 0.037f, 0.034f, 0.035f, 0.033f, 0.032f, 0.032f, 0.032f,
  0.032f, 0.032f, 0.033f, 0.033f, 0.033f, 0.032f, 0.030f, 0.032f, 0.036f, 0.041f,
  0.045f, 0.049f, 0.055f, 0.063f, 0.072f, 0.077f, 0.083f, 0.085f, 0.086f, 0.087f,
  0.087f, 0.087f, 0.087f, 0.088f, 0.088f, 0.088f, 0.088f, 0.088f, 0.088f, 0.088f,
  0.088f, 0.088f, 0.088f, 0.088f, 0.088f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f,
  0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f,
  0.089f};
const float specimen3d50data[] = {
  0.033f, 0.032f, 0.032f, 0.030f, 0.028f, 0.028f, 0.027f, 0.027f, 0.027f, 0.026f,
  0.026f, 0.024f, 0.025f, 0.026f, 0.027f, 0.029f, 0.031f, 0.034f, 0.037f, 0.045f,
  0.056f, 0.067f, 0.077f, 0.086f, 0.092f, 0.095f, 0.097f, 0.095f, 0.092f, 0.090f,
  0.089f, 0.088f, 0.086f, 0.084f, 0.084f, 0.085f, 0.087f, 0.088f, 0.091f, 0.094f,
  0.096f, 0.097f, 0.097f, 0.100f, 0.102f, 0.103f, 0.104f, 0.104f, 0.104f, 0.103f,
  0.103f, 0.104f, 0.104f, 0.106f, 0.108f, 0.113f, 0.119f, 0.128f, 0.141f, 0.158f,
  0.174f, 0.195f, 0.213f, 0.234f, 0.257f, 0.281f, 0.308f, 0.332f, 0.354f, 0.374f,
  0.389f, 0.400f, 0.410f, 0.417f, 0.424f, 0.429f, 0.431f, 0.432f, 0.432f, 0.432f,
  0.432f};
const float specimen4d50data[] = {
  0.401f, 0.401f, 0.401f, 0.401f, 0.401f, 0.401f, 0.401f, 0.401f, 0.401f, 0.400f,
  0.398f, 0.393f, 0.387f, 0.375f, 0.372f, 0.366f, 0.360f, 0.353f, 0.345f, 0.336f,
  0.327f, 0.319f, 0.311f, 0.304f, 0.296f, 0.289f, 0.281f, 0.276f, 0.271f, 0.265f,
  0.260f, 0.255f, 0.250f, 0.248f, 0.246f, 0.245f, 0.244f, 0.243f, 0.241f, 0.239f,
  0.236f, 0.234f, 0.234f, 0.235f, 0.238f, 0.240f, 0.241f, 0.240f, 0.237f, 0.234f,
  0.229f, 0.228f, 0.228f, 0.236f, 0.245f, 0.264f, 0.287f, 0.320f, 0.358f, 0.403f,
  0.455f, 0.505f, 0.560f, 0.610f, 0.660f, 0.710f, 0.755f, 0.795f, 0.825f, 0.850f,
  0.870f, 0.885f, 0.895f, 0.900f, 0.900f, 0.900f, 0.900f, 0.900f, 0.900f, 0.900f,
  0.900f};
const float specimen5d50data[] = {
  0.173f, 0.174f, 0.175f, 0.176f, 0.177f, 0.178f, 0.179f, 0.180f, 0.184f, 0.187f,
  0.187f, 0.186f, 0.181f, 0.178f, 0.174f, 0.170f, 0.165f, 0.160f, 0.156f, 0.151f,
  0.148f, 0.144f, 0.141f, 0.139f, 0.137f, 0.135f, 0.135f, 0.132f, 0.129f, 0.125f,
  0.122f, 0.121f, 0.121f, 0.121f, 0.121f, 0.119f, 0.116f, 0.110f, 0.109f, 0.113f,
  0.119f, 0.131f, 0.149f, 0.174f, 0.200f, 0.228f, 0.258f, 0.286f, 0.316f, 0.342f,
  0.366f, 0.387f, 0.405f, 0.424f, 0.440f, 0.454f, 0.469f, 0.485f, 0.506f, 0.526f,
  0.548f, 0.567f, 0.591f, 0.616f, 0.641f, 0.659f, 0.676f, 0.692f, 0.705f, 0.715f,
  0.725f, 0.734f, 0.744f, 0.754f, 0.764f, 0.774f, 0.784f, 0.794f, 0.804f, 0.814f,
  0.824f};

const float specimen1d55data[] = {
  0.037f, 0.035f, 0.033f, 0.030f, 0.029f, 0.028f, 0.027f, 0.026f, 0.026f, 0.025f,
  0.025f, 0.025f, 0.025f, 0.026f, 0.028f, 0.029f, 0.032f, 0.036f, 0.044f, 0.054f,
  0.068f, 0.085f, 0.103f, 0.121f, 0.136f, 0.147f, 0.155f, 0.158f, 0.159f, 0.161f,
  0.163f, 0.166f, 0.170f, 0.175f, 0.180f, 0.187f, 0.195f, 0.208f, 0.225f, 0.247f,
  0.275f, 0.309f, 0.346f, 0.386f, 0.430f, 0.476f, 0.518f, 0.555f, 0.586f, 0.611f,
  0.633f, 0.649f, 0.662f, 0.674f, 0.686f, 0.698f, 0.711f, 0.725f, 0.739f, 0.753f,
  0.770f, 0.785f, 0.800f, 0.812f, 0.823f, 0.834f, 0.843f, 0.851f, 0.859f, 0.865f,
  0.870f, 0.875f, 0.879f, 0.880f, 0.880f, 0.880f, 0.880f, 0.880f, 0.880f, 0.880f,
  0.880f};
const float specimen2d55data[] = {
  0.025f, 0.033f, 0.041f, 0.046f, 0.054f, 0.060f, 0.067f, 0.074f, 0.081f, 0.088f,
  0.088f, 0.088f, 0.083f, 0.081f, 0.076f, 0.071f, 0.066f, 0.059f, 0.052f, 0.048f,
  0.045f, 0.042f, 0.039f, 0.037f, 0.034f, 0.035f, 0.033f, 0.033f, 0.033f, 0.033f,
  0.033f, 0.033f, 0.033f, 0.033f, 0.033f, 0.032f, 0.030f, 0.032f, 0.036f, 0.040f,
  0.045f, 0.050f, 0.055f, 0.063f, 0.071f, 0.075f, 0.082f, 0.084f, 0.086f, 0.086f,
  0.086f, 0.086f, 0.086f, 0.086f, 0.087f, 0.087f, 0.087f, 0.087f, 0.087f, 0.088f,
  0.088f, 0.088f, 0.089f, 0.089f, 0.089f, 0.090f, 0.090f, 0.090f, 0.090f, 0.090f,
  0.090f, 0.090f, 0.090f, 0.090f, 0.090f, 0.090f, 0.090f, 0.090f, 0.090f, 0.090f,
  0.090f};
const float specimen3d55data[] = {
  0.040f, 0.036f, 0.035f, 0.031f, 0.030f, 0.028f, 0.028f, 0.027f, 0.027f, 0.026f,
  0.026f, 0.025f, 0.026f, 0.027f, 0.027f, 0.029f, 0.031f, 0.034f, 0.038f, 0.046f,
  0.056f, 0.067f, 0.077f, 0.086f, 0.092f, 0.095f, 0.096f, 0.094f, 0.091f, 0.089f,
  0.088f, 0.087f, 0.086f, 0.084f, 0.084f, 0.085f, 0.086f, 0.088f, 0.091f, 0.094f,
  0.096f, 0.097f, 0.098f, 0.101f, 0.103f, 0.104f, 0.104f, 0.104f, 0.104f, 0.103f,
  0.103f, 0.104f, 0.105f, 0.107f, 0.110f, 0.115f, 0.121f, 0.130f, 0.141f, 0.155f,
  0.171f, 0.190f, 0.210f, 0.231f, 0.257f, 0.283f, 0.314f, 0.344f, 0.374f, 0.404f,
  0.434f, 0.464f, 0.524f, 0.554f, 0.581f, 0.612f, 0.641f, 0.670f, 0.699f, 0.728f,
  0.757f};
const float specimen4d55data[] = {
  0.408f, 0.407f, 0.406f, 0.400f, 0.399f, 0.399f, 0.399f, 0.398f, 0.398f, 0.398f,
  0.395f, 0.390f, 0.382f, 0.376f, 0.370f, 0.364f, 0.358f, 0.351f, 0.343f, 0.335f,
  0.327f, 0.319f, 0.312f, 0.304f, 0.297f, 0.290f, 0.283f, 0.278f, 0.273f, 0.267f,
  0.262f, 0.257f, 0.253f, 0.250f, 0.248f, 0.246f, 0.245f, 0.244f, 0.242f, 0.239f,
  0.235f, 0.233f, 0.232f, 0.233f, 0.235f, 0.237f, 0.239f, 0.237f, 0.234f, 0.230f,
  0.225f, 0.223f, 0.225f, 0.231f, 0.243f, 0.260f, 0.285f, 0.317f, 0.353f, 0.402f,
  0.450f, 0.504f, 0.556f, 0.605f, 0.652f, 0.697f, 0.734f, 0.771f, 0.803f, 0.832f,
  0.855f, 0.873f, 0.887f, 0.894f, 0.896f, 0.896f, 0.896f, 0.896f, 0.896f, 0.896f,
  0.896f};
const float specimen5d55data[] = {
  0.145f, 0.153f, 0.160f, 0.164f, 0.169f, 0.173f, 0.177f, 0.181f, 0.183f, 0.185f,
  0.185f, 0.184f, 0.180f, 0.177f, 0.173f, 0.169f, 0.164f, 0.159f, 0.155f, 0.150f,
  0.147f, 0.143f, 0.141f, 0.139f, 0.137f, 0.135f, 0.135f, 0.133f, 0.130f, 0.126f,
  0.123f, 0.122f, 0.122f, 0.122f, 0.122f, 0.119f, 0.116f, 0.111f, 0.109f, 0.113f,
  0.119f, 0.131f, 0.149f, 0.173f, 0.199f, 0.227f, 0.258f, 0.286f, 0.315f, 0.341f,
  0.365f, 0.386f, 0.405f, 0.422f, 0.437f, 0.452f, 0.468f, 0.484f, 0.504f, 0.524f,
  0.547f, 0.570f, 0.593f, 0.616f, 0.635f, 0.661f, 0.681f, 0.698f, 0.711f, 0.724f,
  0.736f, 0.747f, 0.757f, 0.766f, 0.774f, 0.781f, 0.785f, 0.780f, 0.794f, 0.797f,
  0.799f};

const float specimen1d65data[] = {
  0.036f, 0.035f, 0.034f, 0.034f, 0.033f, 0.030f, 0.028f, 0.026f, 0.026f, 0.026f,
  0.026f, 0.026f, 0.026f, 0.027f, 0.029f, 0.030f, 0.033f, 0.037f, 0.044f, 0.054f,
  0.068f, 0.085f, 0.104f, 0.121f, 0.136f, 0.146f, 0.153f, 0.156f, 0.157f, 0.159f,
  0.161f, 0.164f, 0.167f, 0.172f, 0.177f, 0.184f, 0.193f, 0.206f, 0.223f, 0.246f,
  0.275f, 0.309f, 0.347f, 0.389f, 0.434f, 0.480f, 0.523f, 0.560f, 0.593f, 0.619f,
  0.641f, 0.657f, 0.669f, 0.681f, 0.691f, 0.703f, 0.712f, 0.727f, 0.742f, 0.756f,
  0.769f, 0.781f, 0.792f, 0.802f, 0.811f, 0.818f, 0.825f, 0.831f, 0.836f, 0.840f,
  0.844f, 0.846f, 0.847f, 0.847f, 0.847f, 0.847f, 0.847f, 0.847f, 0.847f, 0.847f,
  0.847f};
const float specimen2d65data[] = {
  0.051f, 0.052f, 0.054f, 0.056f, 0.055f, 0.057f, 0.063f, 0.073f, 0.080f, 0.088f,
  0.089f, 0.088f, 0.083f, 0.081f, 0.076f, 0.071f, 0.066f, 0.059f, 0.052f, 0.048f,
  0.045f, 0.043f, 0.040f, 0.037f, 0.034f, 0.035f, 0.033f, 0.033f, 0.034f, 0.034f,
  0.034f, 0.034f, 0.034f, 0.033f, 0.033f, 0.031f, 0.031f, 0.033f, 0.036f, 0.041f,
  0.045f, 0.049f, 0.054f, 0.062f, 0.069f, 0.074f, 0.081f, 0.083f, 0.085f, 0.085f,
  0.085f, 0.085f, 0.085f, 0.085f, 0.085f, 0.084f, 0.084f, 0.085f, 0.084f, 0.084f,
  0.084f, 0.084f, 0.084f, 0.084f, 0.084f, 0.083f, 0.082f, 0.082f, 0.082f, 0.082f,
  0.081f, 0.081f, 0.081f, 0.081f, 0.081f, 0.081f, 0.081f, 0.081f, 0.081f, 0.081f,
  0.081f};
const float specimen3d65data[] = {
  0.043f, 0.042f, 0.040f, 0.037f, 0.031f, 0.028f, 0.028f, 0.027f, 0.027f, 0.026f,
  0.026f, 0.026f, 0.027f, 0.028f, 0.028f, 0.029f, 0.031f, 0.034f, 0.039f, 0.047f,
  0.057f, 0.067f, 0.077f, 0.086f, 0.092f, 0.095f, 0.095f, 0.093f, 0.090f, 0.088f,
  0.087f, 0.086f, 0.085f, 0.083f, 0.083f, 0.083f, 0.084f, 0.088f, 0.091f, 0.094f,
  0.096f, 0.098f, 0.100f, 0.102f, 0.104f, 0.105f, 0.104f, 0.105f, 0.105f, 0.104f,
  0.104f, 0.105f, 0.106f, 0.108f, 0.111f, 0.116f, 0.124f, 0.135f, 0.147f, 0.162f,
  0.179f, 0.198f, 0.218f, 0.240f, 0.263f, 0.270f, 0.270f, 0.271f, 0.271f, 0.271f,
  0.272f, 0.272f, 0.273f, 0.273f, 0.273f, 0.273f, 0.273f, 0.273f, 0.273f, 0.273f,
  0.273f};
const float specimen4d65data[] = {
  0.389f, 0.389f, 0.389f, 0.389f, 0.391f, 0.393f, 0.394f, 0.395f, 0.396f, 0.395f,
  0.392f, 0.387f, 0.379f, 0.373f, 0.367f, 0.361f, 0.355f, 0.348f, 0.340f, 0.333f,
  0.326f, 0.319f, 0.312f, 0.305f, 0.300f, 0.292f, 0.286f, 0.281f, 0.276f, 0.270f,
  0.265f, 0.260f, 0.257f, 0.253f, 0.251f, 0.249f, 0.248f, 0.246f, 0.243f, 0.238f,
  0.234f, 0.231f, 0.229f, 0.229f, 0.230f, 0.232f, 0.234f, 0.232f, 0.228f, 0.224f,
  0.220f, 0.218f, 0.221f, 0.227f, 0.238f, 0.254f, 0.278f, 0.309f, 0.347f, 0.391f,
  0.446f, 0.496f, 0.547f, 0.601f, 0.647f, 0.693f, 0.733f, 0.773f, 0.807f, 0.837f,
  0.880f, 0.888f, 0.893f, 0.893f, 0.894f, 0.894f, 0.894f, 0.894f, 0.894f, 0.894f,
  0.894f};
const float specimen5d65data[] = {
  0.075f, 0.094f, 0.111f, 0.128f, 0.150f, 0.169f, 0.176f, 0.180f, 0.182f, 0.183f,
  0.183f, 0.182f, 0.179f, 0.175f, 0.171f, 0.167f, 0.162f, 0.157f, 0.153f, 0.149f,
  0.146f, 0.143f, 0.141f, 0.139f, 0.138f, 0.137f, 0.136f, 0.134f, 0.131f, 0.127f,
  0.124f, 0.123f, 0.123f, 0.122f, 0.122f, 0.120f, 0.117f, 0.113f, 0.111f, 0.113f,
  0.119f, 0.131f, 0.149f, 0.172f, 0.198f, 0.226f, 0.256f, 0.285f, 0.313f, 0.339f,
  0.363f, 0.384f, 0.402f, 0.419f, 0.435f, 0.451f, 0.464f, 0.485f, 0.504f, 0.524f,
  0.545f, 0.566f, 0.585f, 0.601f, 0.615f, 0.631f, 0.647f, 0.662f, 0.676f, 0.686f,
  0.701f, 0.710f, 0.720f, 0.729f, 0.738f, 0.744f, 0.747f, 0.751f, 0.754f, 0.756f,
  0.757f};

const float specimen1d75data[] = {
  0.038f, 0.036f, 0.035f, 0.034f, 0.031f, 0.030f, 0.029f, 0.027f, 0.027f, 0.026f,
  0.026f, 0.026f, 0.026f, 0.027f, 0.029f, 0.031f, 0.034f, 0.038f, 0.045f, 0.055f,
  0.069f, 0.086f, 0.104f, 0.121f, 0.136f, 0.145f, 0.152f, 0.154f, 0.155f, 0.157f,
  0.159f, 0.162f, 0.166f, 0.170f, 0.175f, 0.182f, 0.191f, 0.204f, 0.221f, 0.245f,
  0.275f, 0.309f, 0.348f, 0.391f, 0.437f, 0.483f, 0.527f, 0.564f, 0.596f, 0.622f,
  0.645f, 0.661f, 0.674f, 0.686f, 0.698f, 0.711f, 0.723f, 0.736f, 0.749f, 0.764f,
  0.777f, 0.792f, 0.804f, 0.814f, 0.822f, 0.826f, 0.833f, 0.838f, 0.842f, 0.843f,
  0.844f, 0.845f, 0.846f, 0.847f, 0.848f, 0.849f, 0.850f, 0.851f, 0.852f, 0.853f,
  0.854f};
const float specimen2d75data[] = {
  0.008f, 0.018f, 0.028f, 0.038f, 0.047f, 0.058f, 0.065f, 0.073f, 0.080f, 0.088f,
  0.089f, 0.088f, 0.083f, 0.081f, 0.076f, 0.071f, 0.066f, 0.059f, 0.052f, 0.048f,
  0.046f, 0.042f, 0.039f, 0.037f, 0.034f, 0.035f, 0.033f, 0.034f, 0.035f, 0.035f,
  0.035f, 0.035f, 0.034f, 0.033f, 0.033f, 0.032f, 0.031f, 0.032f, 0.036f, 0.041f,
  0.045f, 0.049f, 0.055f, 0.060f, 0.069f, 0.073f, 0.079f, 0.081f, 0.083f, 0.084f,
  0.084f, 0.084f, 0.084f, 0.084f, 0.085f, 0.085f, 0.086f, 0.087f, 0.087f, 0.088f,
  0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f,
  0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f, 0.089f,
  0.089f};
const float specimen3d75data[] = {
  0.037f, 0.034f, 0.032f, 0.032f, 0.030f, 0.030f, 0.028f, 0.027f, 0.027f, 0.026f,
  0.026f, 0.027f, 0.027f, 0.028f, 0.028f, 0.029f, 0.032f, 0.035f, 0.040f, 0.048f,
  0.057f, 0.067f, 0.077f, 0.086f, 0.092f, 0.094f, 0.094f, 0.092f, 0.089f, 0.087f,
  0.086f, 0.085f, 0.084f, 0.083f, 0.083f, 0.083f, 0.084f, 0.087f, 0.090f, 0.093f,
  0.096f, 0.098f, 0.100f, 0.103f, 0.105f, 0.106f, 0.106f, 0.106f, 0.106f, 0.105f,
  0.105f, 0.106f, 0.107f, 0.109f, 0.112f, 0.117f, 0.124f, 0.133f, 0.144f, 0.158f,
  0.175f, 0.196f, 0.218f, 0.239f, 0.261f, 0.278f, 0.299f, 0.318f, 0.362f, 0.383f,
  0.406f, 0.427f, 0.448f, 0.468f, 0.488f, 0.508f, 0.528f, 0.548f, 0.568f, 0.588f,
  0.608f};
const float specimen4d75data[] = {
  0.422f, 0.419f, 0.415f, 0.409f, 0.400f, 0.396f, 0.393f, 0.393f, 0.393f, 0.393f,
  0.390f, 0.385f, 0.378f, 0.371f, 0.365f, 0.359f, 0.353f, 0.346f, 0.338f, 0.331f,
  0.324f, 0.318f, 0.311f, 0.305f, 0.299f, 0.294f, 0.288f, 0.284f, 0.279f, 0.273f,
  0.268f, 0.263f, 0.259f, 0.256f, 0.254f, 0.252f, 0.250f, 0.247f, 0.244f, 0.238f,
  0.233f, 0.229f, 0.228f, 0.226f, 0.226f, 0.228f, 0.230f, 0.228f, 0.225f, 0.221f,
  0.217f, 0.215f, 0.217f, 0.222f, 0.232f, 0.249f, 0.272f, 0.303f, 0.339f, 0.380f,
  0.425f, 0.475f, 0.525f, 0.570f, 0.615f, 0.655f, 0.690f, 0.722f, 0.757f, 0.784f,
  0.804f, 0.825f, 0.850f, 0.860f, 0.865f, 0.875f, 0.885f, 0.887f, 0.891f, 0.894f,
  0.897f};
const float specimen5d75data[] = {
  0.158f, 0.161f, 0.163f, 0.167f, 0.168f, 0.170f, 0.174f, 0.177f, 0.179f, 0.180f,
  0.181f, 0.180f, 0.178f, 0.174f, 0.170f, 0.166f, 0.161f, 0.156f, 0.152f, 0.148f,
  0.145f, 0.143f, 0.141f, 0.139f, 0.138f, 0.137f, 0.137f, 0.135f, 0.132f, 0.128f,
  0.125f, 0.124f, 0.124f, 0.123f, 0.123f, 0.121f, 0.118f, 0.113f, 0.111f, 0.113f,
  0.119f, 0.131f, 0.149f, 0.171f, 0.197f, 0.225f, 0.255f, 0.284f, 0.311f, 0.337f,
  0.361f, 0.382f, 0.400f, 0.417f, 0.430f, 0.446f, 0.464f, 0.484f, 0.505f, 0.527f,
  0.547f, 0.568f, 0.588f, 0.608f, 0.627f, 0.648f, 0.668f, 0.688f, 0.709f, 0.729f,
  0.749f, 0.769f, 0.787f, 0.803f, 0.817f, 0.829f, 0.839f, 0.849f, 0.853f, 0.857f,
  0.859f};


const float UVStandard1Data[] = {
  0.638f, 0.661f, 0.683f, 0.704f, 0.722f, 0.734f, 0.742f, 0.750f, 0.756f, 0.761f,
  0.766f, 0.770f, 0.774f, 0.778f, 0.782f, 0.788f, 0.794f, 0.799f, 0.804f, 0.808f,
  0.812f, 0.817f, 0.822f, 0.827f, 0.830f, 0.831f, 0.831f, 0.831f, 0.832f, 0.832f,
  0.833f, 0.833f, 0.834f, 0.834f, 0.835f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};
const float UVStandard2Data[] = {
  0.490f, 0.570f, 0.640f, 0.678f, 0.701f, 0.718f, 0.730f, 0.744f, 0.755f, 0.762f,
  0.766f, 0.770f, 0.774f, 0.778f, 0.782f, 0.788f, 0.794f, 0.799f, 0.804f, 0.808f,
  0.812f, 0.817f, 0.822f, 0.827f, 0.830f, 0.831f, 0.831f, 0.831f, 0.832f, 0.832f,
  0.833f, 0.833f, 0.834f, 0.834f, 0.835f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};
const float UVStandard3Data[] = {
  0.194f, 0.270f, 0.357f, 0.437f, 0.517f, 0.603f, 0.676f, 0.712f, 0.731f, 0.744f,
  0.753f, 0.764f, 0.773f, 0.778f, 0.782f, 0.788f, 0.794f, 0.799f, 0.804f, 0.808f,
  0.812f, 0.817f, 0.822f, 0.827f, 0.830f, 0.831f, 0.831f, 0.831f, 0.832f, 0.832f,
  0.833f, 0.833f, 0.834f, 0.834f, 0.835f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};

const float UVMetamer1D50Data[] = {
  0.662f, 0.687f, 0.711f, 0.742f, 0.767f, 0.797f, 0.822f, 0.824f, 0.820f, 0.816f,
  0.810f, 0.808f, 0.807f, 0.807f, 0.804f, 0.806f, 0.810f, 0.812f, 0.814f, 0.816f,
  0.818f, 0.822f, 0.826f, 0.830f, 0.831f, 0.832f, 0.832f, 0.832f, 0.833f, 0.833f,
  0.834f, 0.835f, 0.835f, 0.835f, 0.836f, 0.836f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.851f, 0.851f,
  0.852f, 0.852f, 0.852f, 0.853f, 0.853f, 0.853f, 0.853f, 0.853f, 0.853f, 0.853f,
  0.853f};
const float UVMetamer2D50Data[] = {
  0.505f, 0.589f, 0.668f, 0.723f, 0.764f, 0.805f, 0.838f, 0.845f, 0.843f, 0.836f,
  0.826f, 0.822f, 0.820f, 0.816f, 0.813f, 0.813f, 0.816f, 0.817f, 0.818f, 0.819f,
  0.821f, 0.825f, 0.829f, 0.831f, 0.833f, 0.833f, 0.833f, 0.833f, 0.834f, 0.834f,
  0.834f, 0.834f, 0.834f, 0.834f, 0.835f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.856f, 0.856f, 0.856f, 0.856f, 0.858f, 0.858f, 0.858f, 0.858f, 0.858f,
  0.859f};
const float UVMetamer3D50Data[] = {
  0.212f, 0.293f, 0.401f, 0.507f, 0.613f, 0.737f, 0.842f, 0.868f, 0.866f, 0.857f,
  0.845f, 0.845f, 0.843f, 0.837f, 0.830f, 0.828f, 0.827f, 0.826f, 0.826f, 0.825f,
  0.825f, 0.828f, 0.831f, 0.834f, 0.836f, 0.836f, 0.835f, 0.834f, 0.835f, 0.835f,
  0.834f, 0.834f, 0.835f, 0.835f, 0.836f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};

const float UVMetamer1D55Data[] = {
  0.646f, 0.674f, 0.705f, 0.740f, 0.773f, 0.806f, 0.832f, 0.835f, 0.831f, 0.825f,
  0.818f, 0.815f, 0.814f, 0.812f, 0.810f, 0.811f, 0.814f, 0.815f, 0.817f, 0.818f,
  0.820f, 0.824f, 0.828f, 0.831f, 0.833f, 0.833f, 0.833f, 0.833f, 0.834f, 0.834f,
  0.834f, 0.834f, 0.835f, 0.835f, 0.836f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};
const float UVMetamer2D55Data[] = {
  0.501f, 0.587f, 0.669f, 0.725f, 0.769f, 0.813f, 0.848f, 0.856f, 0.854f, 0.846f,
  0.835f, 0.830f, 0.827f, 0.823f, 0.819f, 0.818f, 0.820f, 0.820f, 0.821f, 0.821f,
  0.823f, 0.826f, 0.830f, 0.832f, 0.834f, 0.834f, 0.834f, 0.833f, 0.834f, 0.834f,
  0.834f, 0.834f, 0.835f, 0.835f, 0.836f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};
const float UVMetamer3D55Data[] = {
  0.210f, 0.295f, 0.400f, 0.507f, 0.618f, 0.744f, 0.852f, 0.878f, 0.878f, 0.869f,
  0.855f, 0.853f, 0.851f, 0.845f, 0.838f, 0.833f, 0.832f, 0.830f, 0.829f, 0.828f,
  0.828f, 0.830f, 0.833f, 0.835f, 0.837f, 0.836f, 0.836f, 0.834f, 0.835f, 0.835f,
  0.835f, 0.835f, 0.836f, 0.836f, 0.837f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};

const float UVMetamer1D65Data[] = {
  0.648f, 0.676f, 0.709f, 0.748f, 0.785f, 0.824f, 0.855f, 0.860f, 0.855f, 0.846f,
  0.836f, 0.832f, 0.829f, 0.825f, 0.822f, 0.821f, 0.822f, 0.822f, 0.823f, 0.823f,
  0.824f, 0.827f, 0.831f, 0.833f, 0.835f, 0.835f, 0.835f, 0.834f, 0.835f, 0.835f,
  0.834f, 0.834f, 0.835f, 0.835f, 0.836f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};
const float UVMetamer2D65Data[] = {
  0.502f, 0.589f, 0.672f, 0.731f, 0.778f, 0.828f, 0.868f, 0.878f, 0.876f, 0.866f,
  0.852f, 0.846f, 0.841f, 0.836f, 0.831f, 0.828f, 0.828f, 0.827f, 0.827f, 0.826f,
  0.827f, 0.829f, 0.833f, 0.835f, 0.836f, 0.836f, 0.836f, 0.834f, 0.835f, 0.835f,
  0.835f, 0.835f, 0.836f, 0.836f, 0.837f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};
const float UVMetamer3D65Data[] = {
  0.211f, 0.296f, 0.402f, 0.511f, 0.625f, 0.755f, 0.868f, 0.898f, 0.899f, 0.888f,
  0.872f, 0.869f, 0.866f, 0.859f, 0.850f, 0.843f, 0.841f, 0.838f, 0.836f, 0.833f,
  0.833f, 0.834f, 0.837f, 0.838f, 0.839f, 0.837f, 0.837f, 0.835f, 0.836f, 0.836f,
  0.835f, 0.835f, 0.836f, 0.836f, 0.837f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};

const float UVMetamer1D75Data[] = {
  0.649f, 0.679f, 0.713f, 0.754f, 0.795f, 0.838f, 0.875f, 0.881f, 0.875f, 0.865f,
  0.852f, 0.846f, 0.842f, 0.837f, 0.832f, 0.829f, 0.830f, 0.828f, 0.828f, 0.827f,
  0.828f, 0.830f, 0.834f, 0.835f, 0.837f, 0.836f, 0.836f, 0.834f, 0.836f, 0.836f,
  0.835f, 0.835f, 0.836f, 0.836f, 0.837f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};
const float UVMetamer2D75Data[] = {
  0.503f, 0.590f, 0.675f, 0.736f, 0.786f, 0.839f, 0.885f, 0.896f, 0.894f, 0.882f,
  0.866f, 0.859f, 0.853f, 0.847f, 0.840f, 0.836f, 0.835f, 0.833f, 0.832f, 0.830f,
  0.831f, 0.832f, 0.835f, 0.837f, 0.838f, 0.837f, 0.837f, 0.835f, 0.836f, 0.836f,
  0.835f, 0.835f, 0.836f, 0.836f, 0.837f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};
const float UVMetamer3D75Data[] = {
  0.211f, 0.297f, 0.403f, 0.514f, 0.630f, 0.764f, 0.881f, 0.913f, 0.915f, 0.903f,
  0.886f, 0.882f, 0.878f, 0.869f, 0.859f, 0.852f, 0.849f, 0.844f, 0.841f, 0.838f,
  0.837f, 0.837f, 0.840f, 0.840f, 0.841f, 0.839f, 0.839f, 0.836f, 0.837f, 0.837f,
  0.836f, 0.836f, 0.837f, 0.837f, 0.838f, 0.835f, 0.836f, 0.837f, 0.837f, 0.837f,
  0.838f, 0.839f, 0.840f, 0.842f, 0.844f, 0.846f, 0.848f, 0.850f, 0.852f, 0.854f,
  0.856f, 0.857f, 0.857f, 0.857f, 0.858f, 0.859f, 0.860f, 0.861f, 0.862f, 0.863f,
  0.864f};

// Following are the data as they can be found in ISO-23603:2005 Table 5. But
// the table lists the values premultiplied with deltaLambda, which is 5. As
// CML will do normalization automatically, the values have been divided by 5
// in this code. See below.

//const float UVExcitation1Data[] = {
//  0.182f, 0.194f, 0.205f, 0.214f, 0.220f, 0.226f, 0.230f, 0.232f, 0.232f, 0.230f,
//  0.224f, 0.216f, 0.204f, 0.177f, 0.145f, 0.117f, 0.088f, 0.056f, 0.028f, 0.016f,
//  0.011f, 0.009f, 0.006f, 0.002f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f,
//  0.000f, 0.000f, 0.000f};
//const float UVExcitation2Data[] = {
//  0.000f, 0.000f, 0.001f, 0.001f, 0.006f, 0.023f, 0.050f, 0.075f, 0.102f, 0.137f,
//  0.174f, 0.204f, 0.218f, 0.227f, 0.229f, 0.228f, 0.220f, 0.196f, 0.164f, 0.134f,
//  0.104f, 0.068f, 0.038f, 0.023f, 0.016f, 0.011f, 0.007f, 0.004f, 0.001f, 0.000f,
//  0.000f, 0.000f, 0.000f};
//const float UVExcitation3Data[] = {
//  0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.001f, 0.001f, 0.002f, 0.025f,
//  0.055f, 0.082f, 0.111f, 0.152f, 0.191f, 0.218f, 0.235f, 0.244f, 0.245f, 0.245f,
//  0.237f, 0.213f, 0.182f, 0.153f, 0.120f, 0.082f, 0.046f, 0.028f, 0.019f, 0.013f,
//  0.009f, 0.005f, 0.001f};

const float UVExcitation1Data[] = {
  0.0364f, 0.0388f, 0.0410f, 0.0428f, 0.0440f, 0.0452f, 0.0460f, 0.0464f, 0.0464f, 0.0460f,
  0.0448f, 0.0432f, 0.0408f, 0.0354f, 0.0290f, 0.0234f, 0.0176f, 0.0112f, 0.0056f, 0.0032f,
  0.0022f, 0.0018f, 0.0012f, 0.0004f, 0.0000f, 0.0000f, 0.0000f, 0.0000f, 0.0000f, 0.0000f,
  0.0000f, 0.0000f, 0.0000f};
const float UVExcitation2Data[] = {
  0.0000f, 0.0000f, 0.0002f, 0.0002f, 0.0012f, 0.0046f, 0.0100f, 0.0150f, 0.0204f, 0.0274f,
  0.0348f, 0.0408f, 0.0436f, 0.0454f, 0.0458f, 0.0456f, 0.0440f, 0.0392f, 0.0328f, 0.0268f,
  0.0208f, 0.0136f, 0.0076f, 0.0046f, 0.0032f, 0.0022f, 0.0014f, 0.0008f, 0.0002f, 0.0000f,
  0.0000f, 0.0000f, 0.0000f};
const float UVExcitation3Data[] = {
  0.0000f, 0.0000f, 0.0000f, 0.0000f, 0.0000f, 0.0000f, 0.0002f, 0.0002f, 0.0004f, 0.0050f,
  0.0110f, 0.0164f, 0.0222f, 0.0304f, 0.0382f, 0.0436f, 0.0470f, 0.0488f, 0.0490f, 0.0490f,
  0.0474f, 0.0426f, 0.0364f, 0.0306f, 0.0240f, 0.0164f, 0.0092f, 0.0056f, 0.0038f, 0.0026f,
  0.0018f, 0.0010f, 0.0002f};

const float fluorescentRemissionData[] = {
  0.008f, 0.011f, 0.022f, 0.036f, 0.051f, 0.070f, 0.085f, 0.092f, 0.090f, 0.081f,
  0.071f, 0.064f, 0.056f, 0.048f, 0.039f, 0.033f, 0.028f, 0.022f, 0.018f, 0.014f,
  0.011f, 0.009f, 0.008f, 0.006f, 0.005f, 0.004f, 0.004f, 0.003f, 0.003f, 0.003f,
  0.001f, 0.001f, 0.001f, 0.001f, 0.001f};


void convertYuvtoYcd(float* Ycd, const float* yuv){
    cmlSet3(Ycd, yuv[0],
                    (4.f - yuv[1] - 10.f * yuv[2]) / yuv[2],
                    (1.708f * yuv[2] + 0.404f - 1.481f * yuv[1]) / yuv[2]);
}

void convertYcdtoadaptedYuv(float* yuv, const float* Ycd, const float* srcwhitePointYcd, const float* dstwhitePointYcd){
  float cfactor = Ycd[1] * dstwhitePointYcd[1] / srcwhitePointYcd[1];
  float dfactor = Ycd[2] * dstwhitePointYcd[2] / srcwhitePointYcd[2];
  float divisor = (16.518f + 1.481f * cfactor - dfactor);
  yuv[0] = Ycd[0];
  yuv[1] = (10.872f + 0.404f * cfactor - 4.f * dfactor) / divisor;
  yuv[2] = 5.520f / divisor;
}

// ISO 3664 states in forumal D.14 the computation 6X/(X+15Y+3Z). I'm
// pretty sure, they meant  6Y/(X+15Y+3Z) which is according to
// CIE 1960 UCS. This also corresponds to the fact that UVW is based on UCS.
// In CML, this is Yuv.
// UVW is CIE 1964.
void convertYuvtoUVW(float* UVW, float* yuv, const float* whitePointYuv){
  UVW[2] = 25.f * cmlCbrt(yuv[0] * 100.f) - 17.f;
  UVW[0] = 13.f * UVW[2] * (yuv[1] - whitePointYuv[1]);
  UVW[1] = 13.f * UVW[2] * (yuv[2] - whitePointYuv[2]);
}




@implementation MetamericsWindowController

- (void)awakeFromNib{
  referenceIlluminationType = REFERENCE_ILLUMINATION_D50;

  // //////////////////////////
  // Init the select menus
  // //////////////////////////

  [referenceIlluminationselect removeAllItems];
  for(uint32 i=0; i<NUMBER_OF_REFERENCE_ILLUMINATIONS; ++i){
    [referenceIlluminationselect insertItemWithTitle:[NSString stringWithUTF8String:referenceIlluminationstrings[i]] atIndex:i];
  }
  [referenceIlluminationselect selectItemAtIndex:(int)REFERENCE_ILLUMINATION_D50];

  [self update];
}

- (void) update{
  CMLColorMachine* cm = [(ColorMachineApplication*)NSApp getCurrentMachine];
  CMLColorMachine* sm = [(ColorMachineApplication*)NSApp getCurrentScreenMachine];
  
  CMLFunction* ref;
  switch(referenceIlluminationType){
  case REFERENCE_ILLUMINATION_D50:
    ref = cmlCreateIlluminationSpectrum(CML_ILLUMINATION_D50, 0.f);
    break;
  case REFERENCE_ILLUMINATION_D55:
    ref = cmlCreateIlluminationSpectrum(CML_ILLUMINATION_D55, 0.f);
    break;
  case REFERENCE_ILLUMINATION_D65:
    ref = cmlCreateIlluminationSpectrum(CML_ILLUMINATION_D65, 0.f);
    break;
  case REFERENCE_ILLUMINATION_D75:
    ref = cmlCreateIlluminationSpectrum(CML_ILLUMINATION_D75, 0.f);
    break;
  default:
    ref = NULL;
    break;
  }
  
  const CMLFunction* illuminationSpec = cmlGetReferenceIlluminationSpectrum(cm);
  
  const char* illuminationName = cmlGetIlluminationTypeString(cmlGetReferenceIlluminationType(cm));
  [illnamelabel setStringValue:[NSString stringWithFormat:@"Current: %s", illuminationName]];

  CMLFunction* observer10Funcs[3];
  cmlCreateSpecDistFunctions(observer10Funcs, CML_DEFAULT_10DEG_OBSERVER);

  CMLFunction* observer2Funcs[3];
  cmlCreateSpecDistFunctions(observer2Funcs, CML_DEFAULT_2DEG_OBSERVER);

  // /////////////////////
  // Whitepoint computation
  // /////////////////////

  bool ill2available = true;
  bool ill10available = true;
  bool ref2available = true;
  bool ref10available = true;

  CMLVec3 illXYZunnorm10;
  CMLVec3 illXYZ10;
  CMLVec3 illYxy10;
  CMLVec3 illYupvp10;
  CMLVec3 illYuv10;
  
  CMLVec3 illXYZunnorm2;
  CMLVec3 illXYZ2;
  CMLVec3 illYxy2;
  CMLVec3 illYupvp2;
  CMLVec3 illYuv2;
  CMLVec3 illYcd2;
  
  CMLVec3 refXYZunnorm10;
  CMLVec3 refXYZ10;
  CMLVec3 refYxy10;
  CMLVec3 refYupvp10;
  CMLVec3 refYuv10;
    
  CMLVec3 refXYZunnorm2;
  CMLVec3 refXYZ2;
  CMLVec3 refYxy2;
  CMLVec3 refYupvp2;
  CMLVec3 refYuv2;
  CMLVec3 refYcd2;
  
  CMLIntegration integration = cmlMakeDefaultIntegration();
  
  if(illuminationSpec){
    cmlSet3(
      illXYZunnorm10,
      cmlFilterFunction(illuminationSpec, observer10Funcs[0], &integration),
      cmlFilterFunction(illuminationSpec, observer10Funcs[1], &integration),
      cmlFilterFunction(illuminationSpec, observer10Funcs[2], &integration));
    cmlCpy3(illXYZ10, illXYZunnorm10);
    cmlDiv3(illXYZ10, illXYZunnorm10[1]);

    cmlSet3(
      illXYZunnorm2,
      cmlFilterFunction(illuminationSpec, observer2Funcs[0], &integration),
      cmlFilterFunction(illuminationSpec, observer2Funcs[1], &integration),
      cmlFilterFunction(illuminationSpec, observer2Funcs[2], &integration));
    cmlCpy3(illXYZ2, illXYZunnorm2);
    cmlDiv3(illXYZ2, illXYZunnorm2[1]);
  }else{
    CMLObserverType illObserverType = cmlGetObserverType(cm);
    if(illObserverType == CML_OBSERVER_10DEG_CIE_1964){
      cmlCpy3(illYxy10, cmlGetReferenceWhitePointYxy(cm));
      illYxy10[0] = 1.f;
      cmlConvertYxyToXYZ(illXYZ10, illYxy10, CML_NULL);
      cmlSet3(illXYZ2, 0.f, 1.f, 0.f);
      ill2available = false;
    }else{
      cmlCpy3(illYxy2, cmlGetReferenceWhitePointYxy(cm));
      illYxy2[0] = 1.f;
      cmlConvertYxyToXYZ(illXYZ2, illYxy2, CML_NULL);
      cmlSet3(illXYZ10, 0.f, 1.f, 0.f);
      ill10available = false;
    }
  }

  if(ref){
    cmlSet3(
      refXYZunnorm10,
      cmlFilterFunction(ref, observer10Funcs[0], &integration),
      cmlFilterFunction(ref, observer10Funcs[1], &integration),
      cmlFilterFunction(ref, observer10Funcs[2], &integration));
    cmlCpy3(refXYZ10, refXYZunnorm10);
    cmlDiv3(refXYZ10, refXYZunnorm10[1]);

    cmlSet3(
      refXYZunnorm2,
      cmlFilterFunction(ref, observer2Funcs[0], &integration),
      cmlFilterFunction(ref, observer2Funcs[1], &integration),
      cmlFilterFunction(ref, observer2Funcs[2], &integration));
    cmlCpy3(refXYZ2, refXYZunnorm2);
    cmlDiv3(refXYZ2, refXYZunnorm2[1]);
  }else{
    cmlCpy3(refYxy2, cmlGetReferenceWhitePointYxy(cm));
    refYxy2[0] = 1.f;
    cmlConvertYxyToXYZ(refXYZ2, refYxy2, CML_NULL);
    cmlSet3(refXYZ10, 0.f, 1.f, 0.f);
    ref10available = false;
  }

  cmlConvertXYZToYxy(illYxy10, illXYZ10, CML_NULL);
  cmlConvertYxyToYupvp(illYupvp10, illYxy10, CML_NULL);
  cmlConvertYupvpToYuv(illYuv10, illYupvp10);
  
  cmlConvertXYZToYxy(refYxy10, refXYZ10, CML_NULL);
  cmlConvertYxyToYupvp(refYupvp10, refYxy10, CML_NULL);
  cmlConvertYupvpToYuv(refYuv10, refYupvp10);
  
  cmlConvertXYZToYxy(illYxy2, illXYZ2, CML_NULL);
  cmlConvertYxyToYupvp(illYupvp2, illYxy2, CML_NULL);
  cmlConvertYupvpToYuv(illYuv2, illYupvp2);
  convertYuvtoYcd(illYcd2, illYuv2);
  
  cmlConvertXYZToYxy(refYxy2, refXYZ2, CML_NULL);
  cmlConvertYxyToYupvp(refYupvp2, refYxy2, CML_NULL);
  cmlConvertYupvpToYuv(refYuv2, refYupvp2);
  convertYuvtoYcd(refYcd2, refYuv2);

  if(ill10available){
    [illXYZ10_X setStringValue:[NSString stringWithFormat:@"%1.05f", illXYZ10[0]]];
    [illXYZ10_Z setStringValue:[NSString stringWithFormat:@"%1.05f", illXYZ10[2]]];
    [illYxy10_x setStringValue:[NSString stringWithFormat:@"%1.05f", illYxy10[1]]];
    [illYxy10_y setStringValue:[NSString stringWithFormat:@"%1.05f", illYxy10[2]]];
    [illYupvp10_up setStringValue:[NSString stringWithFormat:@"%1.05f", illYupvp10[1]]];
    [illYupvp10_vp setStringValue:[NSString stringWithFormat:@"%1.05f", illYupvp10[2]]];
    [illYuv10_u setStringValue:[NSString stringWithFormat:@"%1.05f", illYuv10[1]]];
    [illYuv10_v setStringValue:[NSString stringWithFormat:@"%1.05f", illYuv10[2]]];
  }else{
    [illXYZ10_X setStringValue:[NSString stringWithFormat:@""]];
    [illXYZ10_Z setStringValue:[NSString stringWithFormat:@""]];
    [illYxy10_x setStringValue:[NSString stringWithFormat:@""]];
    [illYxy10_y setStringValue:[NSString stringWithFormat:@""]];
    [illYupvp10_up setStringValue:[NSString stringWithFormat:@""]];
    [illYupvp10_vp setStringValue:[NSString stringWithFormat:@""]];
    [illYuv10_u setStringValue:[NSString stringWithFormat:@""]];
    [illYuv10_v setStringValue:[NSString stringWithFormat:@""]];
  }

  if(ref10available){
    [refXYZ10_X setStringValue:[NSString stringWithFormat:@"%1.05f", refXYZ10[0]]];
    [refXYZ10_Z setStringValue:[NSString stringWithFormat:@"%1.05f", refXYZ10[2]]];
    [refYxy10_x setStringValue:[NSString stringWithFormat:@"%1.05f", refYxy10[1]]];
    [refYxy10_y setStringValue:[NSString stringWithFormat:@"%1.05f", refYxy10[2]]];
    [refYupvp10_up setStringValue:[NSString stringWithFormat:@"%1.05f", refYupvp10[1]]];
    [refYupvp10_vp setStringValue:[NSString stringWithFormat:@"%1.05f", refYupvp10[2]]];
    [refYuv10_u setStringValue:[NSString stringWithFormat:@"%1.05f", refYuv10[1]]];
    [refYuv10_v setStringValue:[NSString stringWithFormat:@"%1.05f", refYuv10[2]]];
  }else{
    [refXYZ10_X setStringValue:[NSString stringWithFormat:@""]];
    [refXYZ10_Z setStringValue:[NSString stringWithFormat:@""]];
    [refYxy10_x setStringValue:[NSString stringWithFormat:@""]];
    [refYxy10_y setStringValue:[NSString stringWithFormat:@""]];
    [refYupvp10_up setStringValue:[NSString stringWithFormat:@""]];
    [refYupvp10_vp setStringValue:[NSString stringWithFormat:@""]];
    [refYuv10_u setStringValue:[NSString stringWithFormat:@""]];
    [refYuv10_v setStringValue:[NSString stringWithFormat:@""]];
  }

  if(ill2available){
    [illXYZ2_X setStringValue:[NSString stringWithFormat:@"%1.05f", illXYZ2[0]]];
    [illXYZ2_Z setStringValue:[NSString stringWithFormat:@"%1.05f", illXYZ2[2]]];
    [illYxy2_x setStringValue:[NSString stringWithFormat:@"%1.05f", illYxy2[1]]];
    [illYxy2_y setStringValue:[NSString stringWithFormat:@"%1.05f", illYxy2[2]]];
    [illYupvp2_up setStringValue:[NSString stringWithFormat:@"%1.05f", illYupvp2[1]]];
    [illYupvp2_vp setStringValue:[NSString stringWithFormat:@"%1.05f", illYupvp2[2]]];
    [illYuv2_u setStringValue:[NSString stringWithFormat:@"%1.05f", illYuv2[1]]];
    [illYuv2_v setStringValue:[NSString stringWithFormat:@"%1.05f", illYuv2[2]]];
  }else{
    [illXYZ2_X setStringValue:[NSString stringWithFormat:@""]];
    [illXYZ2_Z setStringValue:[NSString stringWithFormat:@""]];
    [illYxy2_x setStringValue:[NSString stringWithFormat:@""]];
    [illYxy2_y setStringValue:[NSString stringWithFormat:@""]];
    [illYupvp2_up setStringValue:[NSString stringWithFormat:@""]];
    [illYupvp2_vp setStringValue:[NSString stringWithFormat:@""]];
    [illYuv2_u setStringValue:[NSString stringWithFormat:@""]];
    [illYuv2_v setStringValue:[NSString stringWithFormat:@""]];
  }

  if(ref2available){
    [refXYZ2_X setStringValue:[NSString stringWithFormat:@"%1.05f", refXYZ2[0]]];
    [refXYZ2_Z setStringValue:[NSString stringWithFormat:@"%1.05f", refXYZ2[2]]];
    [refYxy2_x setStringValue:[NSString stringWithFormat:@"%1.05f", refYxy2[1]]];
    [refYxy2_y setStringValue:[NSString stringWithFormat:@"%1.05f", refYxy2[2]]];
    [refYupvp2_up setStringValue:[NSString stringWithFormat:@"%1.05f", refYupvp2[1]]];
    [refYupvp2_vp setStringValue:[NSString stringWithFormat:@"%1.05f", refYupvp2[2]]];
    [refYuv2_u setStringValue:[NSString stringWithFormat:@"%1.05f", refYuv2[1]]];
    [refYuv2_v setStringValue:[NSString stringWithFormat:@"%1.05f", refYuv2[2]]];
  }else{
    [refXYZ2_X setStringValue:[NSString stringWithFormat:@""]];
    [refXYZ2_Z setStringValue:[NSString stringWithFormat:@""]];
    [refYxy2_x setStringValue:[NSString stringWithFormat:@""]];
    [refYxy2_y setStringValue:[NSString stringWithFormat:@""]];
    [refYupvp2_up setStringValue:[NSString stringWithFormat:@""]];
    [refYupvp2_vp setStringValue:[NSString stringWithFormat:@""]];
    [refYuv2_u setStringValue:[NSString stringWithFormat:@""]];
    [refYuv2_v setStringValue:[NSString stringWithFormat:@""]];
  }



  // /////////////////////
  // D.4.1 Chromaticity Error
  // /////////////////////

  if(ref10available && ill10available){
    CMLVec3 chrerrordistance;
    cmlCpy3(chrerrordistance, refYupvp10);
    cmlSub3(chrerrordistance, illYupvp10);
    float chrerror = cmlLength2(&(chrerrordistance[1]));
    [chrErrortextField setStringValue:[NSString stringWithFormat:@"%1.05f", chrerror]];
  }else{
    [chrErrortextField setStringValue:[NSString stringWithFormat:@""]];
  }




  // /////////////////////
  // D.4.2 Color Rendering index
  // /////////////////////

  const float* metamerdata[14] = {metamer1data, metamer2data, metamer3data, metamer4data, metamer5data,
                                  metamer6data, metamer7data, metamer8data, metamer9data, metamer10data,
                                  metamer11data, metamer12data, metamer13data, metamer14data};
  float Rindex[14];
  float metamerrefXYZ[14 * 3];
  float metamerillXYZ[14 * 3];
  float avg8 = 0.f;

  for(int i=0; i<14; i++){
    CMLArrayFunctionInput input = {
      metamerdata[i],
      false,
      { 81,
        380.f,
        780.f,
        CML_INTERPOLATION_LINEAR,
        CML_EXTRAPOLATION_LINEAR_ZERO,
        CML_EXTRAPOLATION_LINEAR_ZERO}};
    CMLFunction* metamerfunction = cmlCreateArrayFunction(input);

    float* metamerrefXYZptr = &(metamerrefXYZ[i * 3]);
    float* metamerillXYZptr = &(metamerillXYZ[i * 3]);

    CMLVec3 metamerrefUVW;
    if(ref){
      CMLFunction* metamerrefremission = cmlCreateFunctionMulFunction(metamerfunction, ref);
      cmlSet3(
        metamerrefXYZptr,
        cmlFilterFunction(metamerrefremission, observer2Funcs[0], &integration),
        cmlFilterFunction(metamerrefremission, observer2Funcs[1], &integration),
        cmlFilterFunction(metamerrefremission, observer2Funcs[2], &integration));
      cmlDiv3(metamerrefXYZptr, refXYZunnorm2[1]);
      CMLVec3 metamerrefYxy;
      cmlConvertXYZToYxy(metamerrefYxy, metamerrefXYZptr, CML_NULL);
      CMLVec3 metamerrefYupvp;
      cmlConvertYxyToYupvp(metamerrefYupvp, metamerrefYxy, CML_NULL);
      CMLVec3 metamerrefYuv;
      // ISO 3664 states in forumal D.14 the computation 6X/(X+15Y+3Z). I'm
      // pretty sure, they meant  6Y/(X+15Y+3Z) which is according to
      // CIE 1960 UCS. This also corresponds to the fact that UVW is based on
      // UCS. In CML, this is Yuv.
      cmlConvertYupvpToYuv(metamerrefYuv, metamerrefYupvp);
      convertYuvtoUVW(metamerrefUVW, metamerrefYuv, refYuv2);
      cmlReleaseFunction(metamerrefremission);
    }else{
      cmlSet3(metamerrefXYZptr, 0.f, 0.f, 0.f);
      cmlSet3(metamerrefUVW, 0.f, 0.f, 0.f);
    }

    CMLVec3 metamerillUVW;
    if(illuminationSpec){
      CMLFunction* metamerillremission = cmlCreateFunctionMulFunction(metamerfunction, illuminationSpec);
      cmlSet3(
        metamerillXYZptr,
        cmlFilterFunction(metamerillremission, observer2Funcs[0], &integration),
        cmlFilterFunction(metamerillremission, observer2Funcs[1], &integration),
        cmlFilterFunction(metamerillremission, observer2Funcs[2], &integration));
      cmlDiv3(metamerillXYZptr, illXYZunnorm2[1]);
      CMLVec3 metamerillYxy;
      cmlConvertXYZToYxy(metamerillYxy, metamerillXYZptr, CML_NULL);
      CMLVec3 metamerillYupvp;
      cmlConvertYxyToYupvp(metamerillYupvp, metamerillYxy, CML_NULL);
      CMLVec3 metamerillYuv;
      cmlConvertYupvpToYuv(metamerillYuv, metamerillYupvp);
      CMLVec3 metamerillYcd;
      convertYuvtoYcd(metamerillYcd, metamerillYuv);
      CMLVec3 metamerillaYuv;
      convertYcdtoadaptedYuv(metamerillaYuv, metamerillYcd, illYcd2, refYcd2);
      convertYuvtoUVW(metamerillUVW, metamerillaYuv, refYuv2);
      cmlReleaseFunction(metamerillremission);
    }else{
      cmlSet3(metamerillXYZptr, 0.f, 0.f, 0.f);
      cmlSet3(metamerillUVW, 0.f, 0.f, 0.f);
    }

    cmlSub3(metamerrefUVW, metamerillUVW);
    float deltaE = cmlLength3(metamerrefUVW);
    Rindex[i] = 100.f - 4.6f * deltaE;
    
//  [testfield1 setStringValue:[NSString stringWithFormat:@"%1.05f", metamerillYcd[0]]];
//  [testfield2 setStringValue:[NSString stringWithFormat:@"%1.05f", metamerillYcd[1]]];
//  [testfield3 setStringValue:[NSString stringWithFormat:@"%1.05f", metamerillYcd[2]]];

    if(i<8){avg8 += Rindex[i];}
    cmlReleaseFunction(metamerfunction);
  }

  avg8 /= 8.f;
  
  if(illuminationSpec && ref){
    [deltaEavg8 setStringValue:[NSString stringWithFormat:@"%2.03f", avg8]];
    [deltaEmetamer1 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[0]]];
    [deltaEmetamer2 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[1]]];
    [deltaEmetamer3 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[2]]];
    [deltaEmetamer4 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[3]]];
    [deltaEmetamer5 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[4]]];
    [deltaEmetamer6 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[5]]];
    [deltaEmetamer7 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[6]]];
    [deltaEmetamer8 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[7]]];
    [deltaEmetamer9 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[8]]];
    [deltaEmetamer10 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[9]]];
    [deltaEmetamer11 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[10]]];
    [deltaEmetamer12 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[11]]];
    [deltaEmetamer13 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[12]]];
    [deltaEmetamer14 setStringValue:[NSString stringWithFormat:@"%2.03f", Rindex[13]]];
  }else{
    [deltaEavg8 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer1 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer2 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer3 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer4 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer5 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer6 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer7 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer8 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer9 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer10 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer11 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer12 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer13 setStringValue:[NSString stringWithFormat:@""]];
    [deltaEmetamer14 setStringValue:[NSString stringWithFormat:@""]];
  }

//  uint8 metamerrefrgb8Bitdata[14 * 3];
  float metamerrefrgbfloatdata[14 * 3];
  fillRGBFloatArrayWithArray(
    [(ColorMachineApplication*)NSApp getCurrentMachine],
    [(ColorMachineApplication*)NSApp getCurrentScreenMachine],
    metamerrefrgbfloatdata,
    metamerrefXYZ,
    CML_COLOR_XYZ,
    cmlGetNormedInputConverter(CML_COLOR_XYZ),
    14,
    NA_FALSE,
    NA_FALSE);
//  [(ColorMachineApplication*)NSApp fillRGBuint8array:metamerrefrgb8Bitdata
//                                         fromArray:metamerrefXYZ
//                                     withColorType:CML_COLOR_XYZ
//                              normedInputConverter:cmlGetNormedInputConverter(CML_COLOR_XYZ)
//                                             count:14
//                                          drawgrid:NO
//                                          drawmask:NO];
//  cmlData8ToRGB(cm, metamerrefrgbfloatdata, metamerrefrgb8Bitdata, 14);
  
//  uint8 metamerillrgb8Bitdata[14 * 3];
  float metamerillrgbfloatdata[14 * 3];
  fillRGBFloatArrayWithArray(
    [(ColorMachineApplication*)NSApp getCurrentMachine],
    [(ColorMachineApplication*)NSApp getCurrentScreenMachine],
    metamerillrgbfloatdata,
    metamerillXYZ,
    CML_COLOR_XYZ,
    cmlGetNormedInputConverter(CML_COLOR_XYZ),
    14,
    NA_FALSE,
    NA_FALSE);
//  [(ColorMachineApplication*)NSApp fillRGBuint8array:metamerillrgb8Bitdata
//                                         fromArray:metamerillXYZ
//                                     withColorType:CML_COLOR_XYZ
//                              normedInputConverter:cmlGetNormedInputConverter(CML_COLOR_XYZ)
//                                             count:14
//                                          drawgrid:NO
//                                          drawmask:NO];
//  cmlData8ToRGB(cm, metamerillrgbfloatdata, metamerillrgb8Bitdata, 14);

  [deltaEcolorview1 setColors:&(metamerillrgbfloatdata[0*3]) :&(metamerrefrgbfloatdata[0*3])];
  [deltaEcolorview2 setColors:&(metamerillrgbfloatdata[1*3]) :&(metamerrefrgbfloatdata[1*3])];
  [deltaEcolorview3 setColors:&(metamerillrgbfloatdata[2*3]) :&(metamerrefrgbfloatdata[2*3])];
  [deltaEcolorview4 setColors:&(metamerillrgbfloatdata[3*3]) :&(metamerrefrgbfloatdata[3*3])];
  [deltaEcolorview5 setColors:&(metamerillrgbfloatdata[4*3]) :&(metamerrefrgbfloatdata[4*3])];
  [deltaEcolorview6 setColors:&(metamerillrgbfloatdata[5*3]) :&(metamerrefrgbfloatdata[5*3])];
  [deltaEcolorview7 setColors:&(metamerillrgbfloatdata[6*3]) :&(metamerrefrgbfloatdata[6*3])];
  [deltaEcolorview8 setColors:&(metamerillrgbfloatdata[7*3]) :&(metamerrefrgbfloatdata[7*3])];
  [deltaEcolorview9 setColors:&(metamerillrgbfloatdata[8*3]) :&(metamerrefrgbfloatdata[8*3])];
  [deltaEcolorview10 setColors:&(metamerillrgbfloatdata[9*3]) :&(metamerrefrgbfloatdata[9*3])];
  [deltaEcolorview11 setColors:&(metamerillrgbfloatdata[10*3]) :&(metamerrefrgbfloatdata[10*3])];
  [deltaEcolorview12 setColors:&(metamerillrgbfloatdata[11*3]) :&(metamerrefrgbfloatdata[11*3])];
  [deltaEcolorview13 setColors:&(metamerillrgbfloatdata[12*3]) :&(metamerrefrgbfloatdata[12*3])];
  [deltaEcolorview14 setColors:&(metamerillrgbfloatdata[13*3]) :&(metamerrefrgbfloatdata[13*3])];
  [deltaEcolorview1 setNeedsDisplay:YES];
  [deltaEcolorview2 setNeedsDisplay:YES];
  [deltaEcolorview3 setNeedsDisplay:YES];
  [deltaEcolorview4 setNeedsDisplay:YES];
  [deltaEcolorview5 setNeedsDisplay:YES];
  [deltaEcolorview6 setNeedsDisplay:YES];
  [deltaEcolorview7 setNeedsDisplay:YES];
  [deltaEcolorview8 setNeedsDisplay:YES];
  [deltaEcolorview9 setNeedsDisplay:YES];
  [deltaEcolorview10 setNeedsDisplay:YES];
  [deltaEcolorview11 setNeedsDisplay:YES];
  [deltaEcolorview12 setNeedsDisplay:YES];
  [deltaEcolorview13 setNeedsDisplay:YES];
  [deltaEcolorview14 setNeedsDisplay:YES];




  // /////////////////////
  // D.4.3 Visible range metameric index
  // /////////////////////

  const float* standarddata[5] = {standard1data, standard2data, standard3data, standard4data, standard5data};
  const float* specimendata[5];
  switch(referenceIlluminationType){
  case REFERENCE_ILLUMINATION_D50:
    specimendata[0] = specimen1d50data;
    specimendata[1] = specimen2d50data;
    specimendata[2] = specimen3d50data;
    specimendata[3] = specimen4d50data;
    specimendata[4] = specimen5d50data;
    break;
  case REFERENCE_ILLUMINATION_D55:
    specimendata[0] = specimen1d55data;
    specimendata[1] = specimen2d55data;
    specimendata[2] = specimen3d55data;
    specimendata[3] = specimen4d55data;
    specimendata[4] = specimen5d55data;
    break;
  case REFERENCE_ILLUMINATION_D65:
    specimendata[0] = specimen1d65data;
    specimendata[1] = specimen2d65data;
    specimendata[2] = specimen3d65data;
    specimendata[3] = specimen4d65data;
    specimendata[4] = specimen5d65data;
    break;
  case REFERENCE_ILLUMINATION_D75:
    specimendata[0] = specimen1d75data;
    specimendata[1] = specimen2d75data;
    specimendata[2] = specimen3d75data;
    specimendata[3] = specimen4d75data;
    specimendata[4] = specimen5d75data;
    break;
  default:
    specimendata[0] = specimen1d50data;
    specimendata[1] = specimen2d50data;
    specimendata[2] = specimen3d50data;
    specimendata[3] = specimen4d50data;
    specimendata[4] = specimen5d50data;
    break;
  }

  float MIvis[5];
  float standardXYZ[5 * 3];
  float specimenXYZ[5 * 3];
  float avg5 = 0.f;

  for(int i=0; i<5; i++){
    CMLArrayFunctionInput inputStandard = {
      standarddata[i],
      false,
      { 81,
        380.f,
        780.f,
        CML_INTERPOLATION_LINEAR,
        CML_EXTRAPOLATION_LINEAR_ZERO,
        CML_EXTRAPOLATION_LINEAR_ZERO}};
    CMLFunction* standardfunction = cmlCreateArrayFunction(inputStandard);
    CMLArrayFunctionInput inputSpecimen = {
      specimendata[i],
      false,
      { 81,
        380.f,
        780.f,
        CML_INTERPOLATION_LINEAR,
        CML_EXTRAPOLATION_LINEAR_ZERO,
        CML_EXTRAPOLATION_LINEAR_ZERO}};
    CMLFunction* specimenfunction = cmlCreateArrayFunction(inputSpecimen);

    float* standardXYZptr = &(standardXYZ[i * 3]);
    float* specimenXYZptr = &(specimenXYZ[i * 3]);

    CMLVec3 standardLab;
    CMLVec3 specimenLab;

    if(illuminationSpec){
      CMLFunction* standardremission = cmlCreateFunctionMulFunction(standardfunction, illuminationSpec);
      cmlSet3(
        standardXYZptr,
        cmlFilterFunction(standardremission, observer10Funcs[0], &integration),
        cmlFilterFunction(standardremission, observer10Funcs[1], &integration),
        cmlFilterFunction(standardremission, observer10Funcs[2], &integration));
      cmlDiv3(standardXYZptr, illXYZunnorm10[1]);
      cmlConvertXYZToLab(standardLab, standardXYZptr, illXYZ10);

      CMLFunction* specimenremission = cmlCreateFunctionMulFunction(specimenfunction, illuminationSpec);
      cmlSet3(
        specimenXYZptr,
        cmlFilterFunction(specimenremission, observer10Funcs[0], &integration),
        cmlFilterFunction(specimenremission, observer10Funcs[1], &integration),
        cmlFilterFunction(specimenremission, observer10Funcs[2], &integration));
      cmlDiv3(specimenXYZptr, illXYZunnorm10[1]);
      cmlConvertXYZToLab(specimenLab, specimenXYZptr, illXYZ10);
      cmlReleaseFunction(standardremission);
      cmlReleaseFunction(specimenremission);
    }else{
      cmlSet3(standardXYZptr, 0.f, 0.f, 0.f);
      cmlSet3(standardLab, 0.f, 0.f, 0.f);
      cmlSet3(specimenXYZptr, 0.f, 0.f, 0.f);
      cmlSet3(specimenLab, 0.f, 0.f, 0.f);
    }
    
    cmlSub3(specimenLab, standardLab);
    MIvis[i] = cmlLength2(&((specimenLab)[1]));

//    [testfield1 setStringValue:[NSString stringWithFormat:@"%1.05f", specimenLab[0]]];
//    [testfield2 setStringValue:[NSString stringWithFormat:@"%1.05f", specimenLab[1]]];
//    [testfield3 setStringValue:[NSString stringWithFormat:@"%1.05f", specimenLab[2]]];

    avg5 += MIvis[i];
  }

  avg5 /= 5.f;

  if(ref && illuminationSpec){
    [MIvisavg5 setStringValue:[NSString stringWithFormat:@"%1.04f", avg5]];
    [MIvis1 setStringValue:[NSString stringWithFormat:@"%1.04f", MIvis[0]]];
    [MIvis2 setStringValue:[NSString stringWithFormat:@"%1.04f", MIvis[1]]];
    [MIvis3 setStringValue:[NSString stringWithFormat:@"%1.04f", MIvis[2]]];
    [MIvis4 setStringValue:[NSString stringWithFormat:@"%1.04f", MIvis[3]]];
    [MIvis5 setStringValue:[NSString stringWithFormat:@"%1.04f", MIvis[4]]];
  }else{
    [MIvisavg5 setStringValue:[NSString stringWithFormat:@""]];
    [MIvis1 setStringValue:[NSString stringWithFormat:@""]];
    [MIvis2 setStringValue:[NSString stringWithFormat:@""]];
    [MIvis3 setStringValue:[NSString stringWithFormat:@""]];
    [MIvis4 setStringValue:[NSString stringWithFormat:@""]];
    [MIvis5 setStringValue:[NSString stringWithFormat:@""]];
  }
  
  if(avg5 <= .25f){[MIvisgradelabel setStringValue:@"Grade A"];}
  else if(avg5 <= .5f){[MIvisgradelabel setStringValue:@"Grade B"];}
  else if(avg5 <= 1.f){[MIvisgradelabel setStringValue:@"Grade C"];}
  else if(avg5 <= 2.f){[MIvisgradelabel setStringValue:@"Grade D"];}
  else{[MIvisgradelabel setStringValue:@"Grade E"];}

  // Note that the use of a chromatic adaptation is purely for displaying
  // reasons and is not in the ISO-standard at all. The differences between
  // the colors can be seen better. That's all.
  CMLMat33 adaptationMatrix;
  CMLVec3 screenWhitePoint;
  cmlCpy3(screenWhitePoint, cmlGetReferenceWhitePointYxy(sm));
  screenWhitePoint[0] = 1.f;
  cmlComputeChromaticAdaptationMatrix(adaptationMatrix, CML_CHROMATIC_ADAPTATION_BRADFORD, screenWhitePoint, illYxy10);

  float standardadaptedxyzdata[5 * 3];
//  uint8 standardrgb8Bitdata[5 * 3];
  float standardrgbfloatdata[5 * 3];
  cmlConvertXYZToChromaticAdaptedXYZ(&(standardadaptedxyzdata[0]), &(standardXYZ[0]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(standardadaptedxyzdata[3]), &(standardXYZ[3]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(standardadaptedxyzdata[6]), &(standardXYZ[6]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(standardadaptedxyzdata[9]), &(standardXYZ[9]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(standardadaptedxyzdata[12]), &(standardXYZ[12]), adaptationMatrix);
  fillRGBFloatArrayWithArray(
    [(ColorMachineApplication*)NSApp getCurrentMachine],
    [(ColorMachineApplication*)NSApp getCurrentScreenMachine],
    standardrgbfloatdata,
    standardadaptedxyzdata,
    CML_COLOR_XYZ,
    cmlGetNormedInputConverter(CML_COLOR_XYZ),
    5,
    NA_FALSE,
    NA_FALSE);
//  [(ColorMachineApplication*)NSApp fillRGBuint8array:standardrgb8Bitdata
//                                         fromArray:standardadaptedxyzdata
//                                     withColorType:CML_COLOR_XYZ
//                              normedInputConverter:cmlGetNormedInputConverter(CML_COLOR_XYZ)
//                                             count:5
//                                          drawgrid:NO
//                                          drawmask:NO];
//  cmlData8ToRGB(cm, standardrgbfloatdata, standardrgb8Bitdata, 5);
  
  float specimenaptedxyzdata[5 * 3];
//  uint8 specimenrgb8Bitdata[5 * 3];
  float specimenrgbfloatdata[5 * 3];
  cmlConvertXYZToChromaticAdaptedXYZ(&(specimenaptedxyzdata[0]), &(specimenXYZ[0]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(specimenaptedxyzdata[3]), &(specimenXYZ[3]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(specimenaptedxyzdata[6]), &(specimenXYZ[6]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(specimenaptedxyzdata[9]), &(specimenXYZ[9]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(specimenaptedxyzdata[12]), &(specimenXYZ[12]), adaptationMatrix);
  fillRGBFloatArrayWithArray(
    [(ColorMachineApplication*)NSApp getCurrentMachine],
    [(ColorMachineApplication*)NSApp getCurrentScreenMachine],
    specimenrgbfloatdata,
    specimenaptedxyzdata,
    CML_COLOR_XYZ,
    cmlGetNormedInputConverter(CML_COLOR_XYZ),
    5,
    NA_FALSE,
    NA_FALSE);
//  [(ColorMachineApplication*)NSApp fillRGBuint8array:specimenrgb8Bitdata
//                                         fromArray:specimenaptedxyzdata
//                                     withColorType:CML_COLOR_XYZ
//                              normedInputConverter:cmlGetNormedInputConverter(CML_COLOR_XYZ)
//                                             count:5
//                                          drawgrid:NO
//                                          drawmask:NO];
//  cmlData8ToRGB(cm, specimenrgbfloatdata, specimenrgb8Bitdata, 5);

  [MIviscolorview1 setColors:&(standardrgbfloatdata[0*3]) :&(specimenrgbfloatdata[0*3])];
  [MIviscolorview2 setColors:&(standardrgbfloatdata[1*3]) :&(specimenrgbfloatdata[1*3])];
  [MIviscolorview3 setColors:&(standardrgbfloatdata[2*3]) :&(specimenrgbfloatdata[2*3])];
  [MIviscolorview4 setColors:&(standardrgbfloatdata[3*3]) :&(specimenrgbfloatdata[3*3])];
  [MIviscolorview5 setColors:&(standardrgbfloatdata[4*3]) :&(specimenrgbfloatdata[4*3])];
  [MIviscolorview1 setNeedsDisplay:YES];
  [MIviscolorview2 setNeedsDisplay:YES];
  [MIviscolorview3 setNeedsDisplay:YES];
  [MIviscolorview4 setNeedsDisplay:YES];
  [MIviscolorview5 setNeedsDisplay:YES];






  // /////////////////////
  // D.4.3 Ultraviolet range metameric index
  // /////////////////////

  CMLArrayFunctionInput inputFluorescent = {
    fluorescentRemissionData,
    false,
    { 35,
      400.f,
      570.f,
      CML_INTERPOLATION_LINEAR,
      CML_EXTRAPOLATION_LINEAR_ZERO,
      CML_EXTRAPOLATION_LINEAR_ZERO}};
  CMLFunction* fluorescentRemissionFunction = cmlCreateArrayFunction(inputFluorescent);
  const float* UVStandardData[3] = {UVStandard1Data, UVStandard2Data, UVStandard3Data};
  const float* UVExcitationData[3] = {UVExcitation1Data, UVExcitation2Data, UVExcitation3Data};

  const float* UVMetamerData[3];
  switch(referenceIlluminationType){
  case REFERENCE_ILLUMINATION_D50:
    UVMetamerData[0] = UVMetamer1D50Data;
    UVMetamerData[1] = UVMetamer2D50Data;
    UVMetamerData[2] = UVMetamer3D50Data;
    break;
  case REFERENCE_ILLUMINATION_D55:
    UVMetamerData[0] = UVMetamer1D55Data;
    UVMetamerData[1] = UVMetamer2D55Data;
    UVMetamerData[2] = UVMetamer3D55Data;
    break;
  case REFERENCE_ILLUMINATION_D65:
    UVMetamerData[0] = UVMetamer1D65Data;
    UVMetamerData[1] = UVMetamer2D65Data;
    UVMetamerData[2] = UVMetamer3D65Data;
    break;
  case REFERENCE_ILLUMINATION_D75:
    UVMetamerData[0] = UVMetamer1D75Data;
    UVMetamerData[1] = UVMetamer2D75Data;
    UVMetamerData[2] = UVMetamer3D75Data;
    break;
  default:
    UVMetamerData[0] = UVMetamer1D50Data;
    UVMetamerData[1] = UVMetamer2D50Data;
    UVMetamerData[2] = UVMetamer3D50Data;
    break;
  }

  float MIUV[3];
  float uvStandardXYZ[3 * 3];
  float uvMetamerXYZ[3 * 3];
  float avg3 = 0.f;

  for(int i=0; i<3; i++){
    CMLArrayFunctionInput inputUVStandard = {
      UVStandardData[i],
      false,
      { 61,
        400.f,
        700.f,
        CML_INTERPOLATION_LINEAR,
        CML_EXTRAPOLATION_LINEAR_ZERO,
        CML_EXTRAPOLATION_LINEAR_ZERO}};
    CMLFunction* UVStandardFunction = cmlCreateArrayFunction(inputUVStandard);
    CMLArrayFunctionInput inputUVExcitation = {
      UVExcitationData[i],
      false,
      { 33,
        300.f,
        460.f,
        CML_INTERPOLATION_LINEAR,
        CML_EXTRAPOLATION_LINEAR_ZERO,
        CML_EXTRAPOLATION_LINEAR_ZERO}};
    CMLFunction* UVExcitationFunction = cmlCreateArrayFunction(inputUVExcitation);
    CMLArrayFunctionInput inputUVMetamer = {
      UVMetamerData[i],
      false,
      { 61,
        400.f,
        700.f,
        CML_INTERPOLATION_LINEAR,
        CML_EXTRAPOLATION_LINEAR_ZERO,
        CML_EXTRAPOLATION_LINEAR_ZERO}};
    CMLFunction* UVMetamerFunction = cmlCreateArrayFunction(inputUVMetamer);

    float* uvStandardXYZptr = &(uvStandardXYZ[i * 3]);
    float* uvMetamerXYZptr = &(uvMetamerXYZ[i * 3]);


    CMLVec3 UVStandardLab;
    CMLVec3 UVMetamerLab;

    if(illuminationSpec){
      // To correspond with the ISO standard, the excitationN factor must be
      // displayed with (100.f * excitationN * 5.f / illXYZunnorm10[1])
      // The strange factor 5 needs to be here because in the ISO norm, the
      // excitation values are multiplied with the normalized illumination and
      // with a deltaLambda which with the current dataset (see above) is 5.
      // In CML, any normalization is returned as a number independent of
      // deltaLambda, or, so to speak, relative to deltaLambda = 1. This allows
      // to normalize the computational result at the very end. Therefore,
      // to comply with the temporary results published in ISO-3664, the
      // normalization factor 5 must be introduced manually.
      float excitationN = cmlFilterFunction(illuminationSpec, UVExcitationFunction, &integration);
      CMLFunction* betatemp = cmlCreateFunctionDivFunction(fluorescentRemissionFunction, illuminationSpec);
      CMLFunction* betaL = cmlCreateFunctionMulScalar(betatemp, excitationN);
      CMLFunction* betaT = cmlCreateFunctionAddFunction(UVStandardFunction, betaL);

      CMLFunction* UVMetamerXXXRemission = cmlCreateFunctionMulFunction(betaT, illuminationSpec);
      cmlSet3(
        uvStandardXYZptr,
        cmlFilterFunction(UVMetamerXXXRemission, observer10Funcs[0], &integration),
        cmlFilterFunction(UVMetamerXXXRemission, observer10Funcs[1], &integration),
        cmlFilterFunction(UVMetamerXXXRemission, observer10Funcs[2], &integration));
      cmlDiv3(uvStandardXYZptr, illXYZunnorm10[1]);
      cmlConvertXYZToLab(UVStandardLab, uvStandardXYZptr, illXYZ10);

      CMLFunction* UVmetamerremission = cmlCreateFunctionMulFunction(UVMetamerFunction, illuminationSpec);
      cmlSet3(
        uvMetamerXYZptr,
        cmlFilterFunction(UVmetamerremission, observer10Funcs[0], &integration),
        cmlFilterFunction(UVmetamerremission, observer10Funcs[1], &integration),
        cmlFilterFunction(UVmetamerremission, observer10Funcs[2], &integration));
      cmlDiv3(uvMetamerXYZptr, illXYZunnorm10[1]);
      cmlConvertXYZToLab(UVMetamerLab, uvMetamerXYZptr, illXYZ10);
      cmlReleaseFunction(betatemp);
      cmlReleaseFunction(betaL);
      cmlReleaseFunction(betaT);
      cmlReleaseFunction(UVMetamerXXXRemission);
      cmlReleaseFunction(UVmetamerremission);
    }else{
      cmlSet3(uvStandardXYZptr, 0.f, 0.f, 0.f);
      cmlSet3(UVStandardLab, 0.f, 0.f, 0.f);
      cmlSet3(uvMetamerXYZptr, 0.f, 0.f, 0.f);
      cmlSet3(UVMetamerLab, 0.f, 0.f, 0.f);
    }
    
    cmlSub3(UVMetamerLab, UVStandardLab);
    MIUV[i] = cmlLength2(&((UVMetamerLab)[1]));

//    [testfield1 setStringValue:[NSString stringWithFormat:@"%1.05f", 100.f * excitationN / illXYZunnorm10[1]]];
//    [testfield2 setStringValue:[NSString stringWithFormat:@"%1.05f", uvMetamerXYZptr[1]]];
//    [testfield3 setStringValue:[NSString stringWithFormat:@"%1.05f", uvMetamerXYZptr[2]]];

    avg3 += MIUV[i];
    
    cmlReleaseFunction(UVStandardFunction);
    cmlReleaseFunction(UVExcitationFunction);
    cmlReleaseFunction(UVMetamerFunction);
  }

  cmlReleaseFunction(fluorescentRemissionFunction);
  
  avg3 /= 3.f;

  if(ref && illuminationSpec){
    [MIUVavg3 setStringValue:[NSString stringWithFormat:@"%1.04f", avg3]];
    [MIUV1 setStringValue:[NSString stringWithFormat:@"%1.04f", MIUV[0]]];
    [MIUV2 setStringValue:[NSString stringWithFormat:@"%1.04f", MIUV[1]]];
    [MIUV3 setStringValue:[NSString stringWithFormat:@"%1.04f", MIUV[2]]];
  }else{
    [MIUVavg3 setStringValue:[NSString stringWithFormat:@""]];
    [MIUV1 setStringValue:[NSString stringWithFormat:@""]];
    [MIUV2 setStringValue:[NSString stringWithFormat:@""]];
    [MIUV3 setStringValue:[NSString stringWithFormat:@""]];
  }

  if(avg3 <= .25f){[MIUVgradelabel setStringValue:@"Grade A"];}
  else if(avg3 <= .5f){[MIUVgradelabel setStringValue:@"Grade B"];}
  else if(avg3 <= 1.f){[MIUVgradelabel setStringValue:@"Grade C"];}
  else if(avg3 <= 2.f){[MIUVgradelabel setStringValue:@"Grade D"];}
  else{[MIUVgradelabel setStringValue:@"Grade E"];}

  float uvStandardAdaptedXYZData[3 * 3];
//  uint8 UVstandardrgb8Bitdata[3 * 3];
  float uvStandardRGBFloatData[3 * 3];
  cmlConvertXYZToChromaticAdaptedXYZ(&(uvStandardAdaptedXYZData[0]), &(uvStandardXYZ[0]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(uvStandardAdaptedXYZData[3]), &(uvStandardXYZ[3]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(uvStandardAdaptedXYZData[6]), &(uvStandardXYZ[6]), adaptationMatrix);
  fillRGBFloatArrayWithArray(
    [(ColorMachineApplication*)NSApp getCurrentMachine],
    [(ColorMachineApplication*)NSApp getCurrentScreenMachine],
    uvStandardRGBFloatData,
    uvStandardAdaptedXYZData,
    CML_COLOR_XYZ,
    cmlGetNormedInputConverter(CML_COLOR_XYZ),
    3,
    NA_FALSE,
    NA_FALSE);
//  [(ColorMachineApplication*)NSApp fillRGBuint8array:UVstandardrgb8Bitdata
//                                         fromArray:uvStandardAdaptedXYZData
//                                     withColorType:CML_COLOR_XYZ
//                              normedInputConverter:cmlGetNormedInputConverter(CML_COLOR_XYZ)
//                                             count:3
//                                          drawgrid:NO
//                                          drawmask:NO];
//  cmlData8ToRGB(cm, uvStandardRGBFloatData, UVstandardrgb8Bitdata, 3);
  
  float uvMetamerAdaptedXYZData[3 * 3];
//  uint8 UVmetamerrgb8Bitdata[3 * 3];
  float uvMetamerRGBFloatData[3 * 3];
  cmlConvertXYZToChromaticAdaptedXYZ(&(uvMetamerAdaptedXYZData[0]), &(uvMetamerXYZ[0]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(uvMetamerAdaptedXYZData[3]), &(uvMetamerXYZ[3]), adaptationMatrix);
  cmlConvertXYZToChromaticAdaptedXYZ(&(uvMetamerAdaptedXYZData[6]), &(uvMetamerXYZ[6]), adaptationMatrix);
  fillRGBFloatArrayWithArray(
    cm,
    sm,
    uvMetamerRGBFloatData,
    uvMetamerAdaptedXYZData,
    CML_COLOR_XYZ,
    cmlGetNormedInputConverter(CML_COLOR_XYZ),
    3,
    NA_FALSE,
    NA_FALSE);

  [MIUVcolorview1 setColors:&(uvStandardRGBFloatData[0*3]) :&(uvMetamerRGBFloatData[0*3])];
  [MIUVcolorview2 setColors:&(uvStandardRGBFloatData[1*3]) :&(uvMetamerRGBFloatData[1*3])];
  [MIUVcolorview3 setColors:&(uvStandardRGBFloatData[2*3]) :&(uvMetamerRGBFloatData[2*3])];
  [MIUVcolorview1 setNeedsDisplay:YES];
  [MIUVcolorview2 setNeedsDisplay:YES];
  [MIUVcolorview3 setNeedsDisplay:YES];


  float avg53 = (avg5 * 5.f + avg3 * 3.f) / 8.f;
  if(ref && illuminationSpec){
    [MIavg8 setStringValue:[NSString stringWithFormat:@"%1.04f", avg53]];
  }else{
    [MIavg8 setStringValue:[NSString stringWithFormat:@""]];
  }

  if(avg53 <= .25f){[MIgradelabel setStringValue:@"Grade A"];}
  else if(avg53 <= .5f){[MIgradelabel setStringValue:@"Grade B"];}
  else if(avg53 <= 1.f){[MIgradelabel setStringValue:@"Grade C"];}
  else if(avg53 <= 2.f){[MIgradelabel setStringValue:@"Grade D"];}
  else{[MIgradelabel setStringValue:@"Grade E"];}


  cmlReleaseFunction(ref);
  cmlReleaseFunction(observer10Funcs[0]);
  cmlReleaseFunction(observer10Funcs[1]);
  cmlReleaseFunction(observer10Funcs[2]);
  cmlReleaseFunction(observer2Funcs[0]);
  cmlReleaseFunction(observer2Funcs[1]);
  cmlReleaseFunction(observer2Funcs[2]);

}

- (void)showDialog{
  [[self window] makeKeyAndOrderFront:self];
}

- (IBAction)referenceIlluminationchange:(NSPopUpButton*)sender{
  referenceIlluminationType = (CMReferenceIlluminationType)[sender indexOfSelectedItem];
  [self update];
}


@end
