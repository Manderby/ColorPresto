
CMThreeDeeOptionsController = NASpace {
  share CMThreeDeeController parent;

  NALabel axisLabel;
  NACheckBox axisCheckBox;
  NALabel spectrumLabel;
  NACheckBox spectrumCheckBox;
  NALabel backgroundLabel;
  NASlider backgroundSlider;
  NALabel fovyLabel;
  NASlider fovySlider;

  showSpectrum = false;
  showAxis = true;
  backgroundGray = 0.3f;
  fovy = 50.f;
};



pressOptionsButton = bool(
  mutable CMThreeDeeOptionsController this,
  NAReaction reaction)
{
  this = [reaction.controller];

  if(reaction.uiElement == spectrumCheckBox){
    showSpectrum = spectrumCheckBox.getState();
  }else if(reaction.uiElement == axisCheckBox){
    showAxis = axisCheckBox.getState();
  }

  parent.update();

  return true;
}



changeOptionsSlider = bool(NAReactionreaction){
  mutable CMThreeDeeOptionsController this = [reaction.controller];

  if(reaction.uiElement == backgroundSlider){
    backgroundGray = backgroundSlider.getValue();
  }else if(reaction.uiElement == fovySlider){
    fovy = fovySlider.getValue();
    if(fovy < 15.f){fovy = 0.f;}
  }
  
  parent.update();

  return true;
}



CMThreeDeeOptionsController.constructor = mutable (parent CMThreeDeeController){
  .parent = parent;
  space = new NASpace(naMakeSize(1, 1));
  space.setAlternateBackground(false);

  axisLabel = new NALabel(cmTranslate(CMAxis), threeDeeLabelWidth);
  axisCheckBox = new NACheckBox("", 30);
  axisCheckBox.addUIReaction(NA_UI_COMMAND_PRESSED, pressOptionsButton, this);

  spectrumLabel = new NALabel(cmTranslate(CMSpectrum), threeDeeLabelWidth);
  spectrumCheckBox = new NACheckBox("", 30);
  spectrumCheckBox.addUIReaction(NA_UI_COMMAND_PRESSED, pressOptionsButton, this);

  backgroundLabel = new NALabel(cmTranslate(CMBackground), threeDeeLabelWidth);
  backgroundSlider = new NASlider(threeDeeControlWidth);
  backgroundSlider.setRange(0., 1., 0);
  backgroundSlider.addUIReaction(NA_UI_COMMAND_EDITED, changeOptionsSlider, this);

  fovyLabel = new NALabel(cmTranslate(CMFovy), threeDeeLabelWidth);
  fovySlider = new NASlider(threeDeeControlWidth);
  fovySlider.setRange(90., 0., 0);
  fovySlider.addUIReaction(NA_UI_COMMAND_EDITED, changeOptionsSlider, this);

  // layout
  cmBeginUILayout(space, threeDeeBezel);
  
  cmAddUIRow(axisLabel, uiElemHeight);
  cmAddUICol(axisCheckBox, marginH);

  cmAddUIRow(spectrumLabel, uiElemHeight);
  cmAddUICol(spectrumCheckBox, marginH);

  cmAddUIRow(backgroundLabel, uiElemHeight);
  cmAddUICol(backgroundSlider, marginH);

  cmAddUIRow(fovyLabel, uiElemHeight);
  cmAddUICol(fovySlider, marginH);

  cmEndUILayout();
}



CMThreeDeeOptionsController.getAxisGray = () f64{
  axisGray = backgroundGray + .5;
  if(axisGray > 1.f){axisGray -= 1.f;}
  return axisGray;
}

CMThreeDeeOptionsController.getBackgroundGray = () f64{
  return backgroundGray;
}

CMThreeDeeOptionsController.getFovy = () f64{
  return fovy;
}

CMThreeDeeOptionsController.getShowAxis = () f64{
  return showAxis;
}

CMThreeDeeOptionsController.getShowSpectrum = () f64{
  return showSpectrum;
}

// predicates:
// how about something like:
// needs lots of thinking.
// CMThreeDeeOptionsController.getShowSpectrum = showSpectrum;

CMThreeDeeOptionsController.update = (){
  spectrumCheckBox.setState(showSpectrum);
  axisCheckBox.setState(showAxis);
  backgroundSlider.setValue(backgroundGray);
  fovySlider.setValue(fovy);
}
